
Drone_PWM_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006cf8  08006cf8  00007cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d64  08006d64  000080fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006d64  08006d64  00007d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d6c  08006d6c  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d6c  08006d6c  00007d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006d74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  200000fc  08006e70  000080fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  08006e70  00008d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7e9  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3d  00000000  00000000  00015915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00018458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000867  00000000  00000000  00018fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eb8  00000000  00000000  0001982f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fac9  00000000  00000000  000316e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008716c  00000000  00000000  000411b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c831c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d08  00000000  00000000  000c8360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cb068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ce0 	.word	0x08006ce0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08006ce0 	.word	0x08006ce0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a1f      	ldr	r2, [pc, #124]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a18      	ldr	r2, [pc, #96]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	603b      	str	r3, [r7, #0]
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a11      	ldr	r2, [pc, #68]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_GPIO_Init+0x9c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <MX_GPIO_Init+0xa0>)
 8000576:	f000 fc75 	bl	8000e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800057a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_GPIO_Init+0xa0>)
 8000594:	f000 fae2 	bl	8000b5c <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40020400 	.word	0x40020400

080005a8 <main>:
  */



int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 f92d 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f81f 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f7ff ffa5 	bl	8000504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init(); // this brings up the CDC interface
 80005ba:	f005 fe47 	bl	800624c <MX_USB_DEVICE_Init>


  /* USER CODE BEGIN 2 */
  // greeting right after USB comes up
  {
	  uint8_t msg[] = "Hello MPU6050!\r\n";
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <main+0x44>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	7023      	strb	r3, [r4, #0]
	  if (CDC_Transmit_FS(msg, sizeof(msg)-1) != USBD_OK) {
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2110      	movs	r1, #16
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 fef9 	bl	80063c8 <CDC_Transmit_FS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80005d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005da:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <main+0x48>)
 80005dc:	f000 fc5b 	bl	8000e96 <HAL_GPIO_TogglePin>
	HAL_Delay(500); // delay 500 ms
 80005e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e4:	f000 f984 	bl	80008f0 <HAL_Delay>
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80005e8:	bf00      	nop
 80005ea:	e7f4      	b.n	80005d6 <main+0x2e>
 80005ec:	08006cf8 	.word	0x08006cf8
 80005f0:	40020400 	.word	0x40020400

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 fb40 	bl	8006c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a26      	ldr	r2, [pc, #152]	@ (80006bc <SystemClock_Config+0xc8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <SystemClock_Config+0xcc>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000664:	230f      	movs	r3, #15
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000668:	2390      	movs	r3, #144	@ 0x90
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066c:	2304      	movs	r3, #4
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000670:	2305      	movs	r3, #5
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fe79 	bl	8002370 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f81e 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f8db 	bl	8002860 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b0:	f000 f808 	bl	80006c4 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	@ 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <HAL_MspInit+0x4c>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006de:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <HAL_MspInit+0x4c>)
 80006e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <HAL_MspInit+0x4c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	4a08      	ldr	r2, [pc, #32]	@ (800071c <HAL_MspInit+0x4c>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	@ 0x40
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <NMI_Handler+0x4>

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <MemManage_Handler+0x4>

08000738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <UsageFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 f89b 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <OTG_FS_IRQHandler+0x10>)
 8000786:	f000 fce4 	bl	8001152 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200015fc 	.word	0x200015fc

08000794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <SystemInit+0x20>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <SystemInit+0x20>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007bc:	f7ff ffea 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f006 fa57 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ea:	f7ff fedd 	bl	80005a8 <main>
  bx  lr    
 80007ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80007fc:	08006d74 	.word	0x08006d74
  ldr r2, =_sbss
 8000800:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000804:	20001d00 	.word	0x20001d00

08000808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_Init+0x40>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <HAL_Init+0x40>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800081a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <HAL_Init+0x40>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <HAL_Init+0x40>)
 8000822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	@ (800084c <HAL_Init+0x40>)
 800082e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f94f 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	200f      	movs	r0, #15
 800083c:	f000 f808 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff ff46 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023c00 	.word	0x40023c00

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <HAL_InitTick+0x54>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <HAL_InitTick+0x58>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f967 	bl	8000b42 <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e00e      	b.n	800089c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d80a      	bhi.n	800089a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f92f 	bl	8000aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <HAL_InitTick+0x5c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x20>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_IncTick+0x24>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000118 	.word	0x20000118

080008d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20000118 	.word	0x20000118

080008f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_Delay+0x44>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffde 	bl	80008d8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4907      	ldr	r1, [pc, #28]	@ (80009d4 <__NVIC_EnableIRQ+0x38>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	@ (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	@ 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	@ 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa4:	d301      	bcc.n	8000aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <SysTick_Config+0x40>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f7ff ff8e 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <SysTick_Config+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac2:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <SysTick_Config+0x40>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff29 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff3e 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ff8e 	bl	8000a2c <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff31 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffa2 	bl	8000a94 <SysTick_Config>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	@ 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	e159      	b.n	8000e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 8148 	bne.w	8000e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d005      	beq.n	8000bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d130      	bne.n	8000c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be4:	2201      	movs	r2, #1
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	091b      	lsrs	r3, r3, #4
 8000bfa:	f003 0201 	and.w	r2, r3, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d017      	beq.n	8000c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d123      	bne.n	8000ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	69b9      	ldr	r1, [r7, #24]
 8000c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0203 	and.w	r2, r3, #3
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 80a2 	beq.w	8000e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b57      	ldr	r3, [pc, #348]	@ (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	4a56      	ldr	r2, [pc, #344]	@ (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf2:	4b54      	ldr	r3, [pc, #336]	@ (8000e44 <HAL_GPIO_Init+0x2e8>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cfe:	4a52      	ldr	r2, [pc, #328]	@ (8000e48 <HAL_GPIO_Init+0x2ec>)
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3302      	adds	r3, #2
 8000d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a49      	ldr	r2, [pc, #292]	@ (8000e4c <HAL_GPIO_Init+0x2f0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x202>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a48      	ldr	r2, [pc, #288]	@ (8000e50 <HAL_GPIO_Init+0x2f4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x1fe>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a47      	ldr	r2, [pc, #284]	@ (8000e54 <HAL_GPIO_Init+0x2f8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x1fa>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a46      	ldr	r2, [pc, #280]	@ (8000e58 <HAL_GPIO_Init+0x2fc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x1f6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a45      	ldr	r2, [pc, #276]	@ (8000e5c <HAL_GPIO_Init+0x300>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x1f2>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e008      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d52:	2303      	movs	r3, #3
 8000d54:	e004      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x204>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d70:	4935      	ldr	r1, [pc, #212]	@ (8000e48 <HAL_GPIO_Init+0x2ec>)
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7e:	4b38      	ldr	r3, [pc, #224]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000da2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dcc:	4a24      	ldr	r2, [pc, #144]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd2:	4b23      	ldr	r3, [pc, #140]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000df6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e20:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <HAL_GPIO_Init+0x304>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	f67f aea2 	bls.w	8000b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40013c00 	.word	0x40013c00

08000e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e74:	787b      	ldrb	r3, [r7, #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e80:	e003      	b.n	8000e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	041a      	lsls	r2, r3, #16
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	619a      	str	r2, [r3, #24]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4013      	ands	r3, r2
 8000eae:	041a      	lsls	r2, r3, #16
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af02      	add	r7, sp, #8
 8000ed0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e101      	b.n	80010e0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f005 fbae 	bl	8006658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f0a:	d102      	bne.n	8000f12 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 ff71 	bl	8002dfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7c1a      	ldrb	r2, [r3, #16]
 8000f24:	f88d 2000 	strb.w	r2, [sp]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f2c:	f001 fe50 	bl	8002bd0 <USB_CoreInit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0ce      	b.n	80010e0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f001 ff69 	bl	8002e20 <USB_SetCurrentMode>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2202      	movs	r2, #2
 8000f58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e0bf      	b.n	80010e0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e04a      	b.n	8000ffc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3315      	adds	r3, #21
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3314      	adds	r3, #20
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	b298      	uxth	r0, r3
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	332e      	adds	r3, #46	@ 0x2e
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	331c      	adds	r3, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3320      	adds	r3, #32
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3324      	adds	r3, #36	@ 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3af      	bcc.n	8000f66 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e044      	b.n	8001096 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4413      	add	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3301      	adds	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3b5      	bcc.n	800100c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7c1a      	ldrb	r2, [r3, #16]
 80010a8:	f88d 2000 	strb.w	r2, [sp]
 80010ac:	3304      	adds	r3, #4
 80010ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b0:	f001 ff02 	bl	8002eb8 <USB_DevInit>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d005      	beq.n	80010c6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2202      	movs	r2, #2
 80010be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00c      	b.n	80010e0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 ff4c 	bl	8003f76 <USB_DevDisconnect>

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_PCD_Start+0x1c>
 8001100:	2302      	movs	r3, #2
 8001102:	e022      	b.n	800114a <HAL_PCD_Start+0x62>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001114:	2b00      	cmp	r3, #0
 8001116:	d009      	beq.n	800112c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001124:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fe53 	bl	8002ddc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fefa 	bl	8003f34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b08d      	sub	sp, #52	@ 0x34
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f002 ffb8 	bl	80040de <USB_GetMode>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	f040 848c 	bne.w	8001a8e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 ff1c 	bl	8003fb8 <USB_ReadInterrupts>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8482 	beq.w	8001a8c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 ff09 	bl	8003fb8 <USB_ReadInterrupts>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d107      	bne.n	80011c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f002 0202 	and.w	r2, r2, #2
 80011be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fef7 	bl	8003fb8 <USB_ReadInterrupts>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b10      	cmp	r3, #16
 80011d2:	d161      	bne.n	8001298 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0210 	bic.w	r2, r2, #16
 80011e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	f003 020f 	and.w	r2, r3, #15
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	3304      	adds	r3, #4
 8001202:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800120a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800120e:	d124      	bne.n	800125a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d035      	beq.n	8001288 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	6a38      	ldr	r0, [r7, #32]
 8001230:	f002 fd2e 	bl	8003c90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001240:	441a      	add	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001252:	441a      	add	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	e016      	b.n	8001288 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001260:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001264:	d110      	bne.n	8001288 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800126c:	2208      	movs	r2, #8
 800126e:	4619      	mov	r1, r3
 8001270:	6a38      	ldr	r0, [r7, #32]
 8001272:	f002 fd0d 	bl	8003c90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001282:	441a      	add	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0210 	orr.w	r2, r2, #16
 8001296:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f002 fe8b 	bl	8003fb8 <USB_ReadInterrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80012ac:	f040 80a7 	bne.w	80013fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fe90 	bl	8003fde <USB_ReadDevAllOutEpInterrupt>
 80012be:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80012c0:	e099      	b.n	80013f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 808e 	beq.w	80013ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 feb4 	bl	8004046 <USB_ReadDevOutEPInterrupt>
 80012de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012f6:	461a      	mov	r2, r3
 80012f8:	2301      	movs	r3, #1
 80012fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fea4 	bl	800204c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00c      	beq.n	8001328 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	015a      	lsls	r2, r3, #5
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	4413      	add	r3, r2
 8001316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800131a:	461a      	mov	r2, r3
 800131c:	2308      	movs	r3, #8
 800131e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 ff7a 	bl	800221c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800133e:	461a      	mov	r2, r3
 8001340:	2310      	movs	r3, #16
 8001342:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d030      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001356:	2b80      	cmp	r3, #128	@ 0x80
 8001358:	d109      	bne.n	800136e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800136e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	78db      	ldrb	r3, [r3, #3]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d108      	bne.n	800139e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2200      	movs	r2, #0
 8001390:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f005 fa67 	bl	800686c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2302      	movs	r3, #2
 80013ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	015a      	lsls	r2, r3, #5
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c6:	461a      	mov	r2, r3
 80013c8:	2320      	movs	r3, #32
 80013ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013e2:	461a      	mov	r2, r3
 80013e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	3301      	adds	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80013f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80013f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f af62 	bne.w	80012c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fdd8 	bl	8003fb8 <USB_ReadInterrupts>
 8001408:	4603      	mov	r3, r0
 800140a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800140e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001412:	f040 80db 	bne.w	80015cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f002 fdf9 	bl	8004012 <USB_ReadDevAllInEpInterrupt>
 8001420:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001426:	e0cd      	b.n	80015c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80c2 	beq.w	80015b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fe1f 	bl	8004082 <USB_ReadDevInEPInterrupt>
 8001444:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d057      	beq.n	8001500 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	2201      	movs	r2, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	69f9      	ldr	r1, [r7, #28]
 800146c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001470:	4013      	ands	r3, r2
 8001472:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001480:	461a      	mov	r2, r3
 8001482:	2301      	movs	r3, #1
 8001484:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	799b      	ldrb	r3, [r3, #6]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d132      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	3320      	adds	r3, #32
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4403      	add	r3, r0
 80014ae:	331c      	adds	r3, #28
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4419      	add	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4403      	add	r3, r0
 80014c2:	3320      	adds	r3, #32
 80014c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d113      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x3a2>
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	3324      	adds	r3, #36	@ 0x24
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d108      	bne.n	80014f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80014ec:	461a      	mov	r2, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	f002 fe26 	bl	8004140 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f005 f93b 	bl	8006776 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001516:	461a      	mov	r2, r3
 8001518:	2308      	movs	r3, #8
 800151a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001532:	461a      	mov	r2, r3
 8001534:	2310      	movs	r3, #16
 8001536:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	4413      	add	r3, r2
 800154a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800154e:	461a      	mov	r2, r3
 8001550:	2340      	movs	r3, #64	@ 0x40
 8001552:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d023      	beq.n	80015a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800155e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001560:	6a38      	ldr	r0, [r7, #32]
 8001562:	f001 fe0d 	bl	8003180 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	3310      	adds	r3, #16
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	3304      	adds	r3, #4
 8001578:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2200      	movs	r2, #0
 8001586:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f005 f97e 	bl	8006890 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a0:	461a      	mov	r2, r3
 80015a2:	2302      	movs	r3, #2
 80015a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fcbd 	bl	8001f32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	3301      	adds	r3, #1
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f47f af2e 	bne.w	8001428 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fcf1 	bl	8003fb8 <USB_ReadInterrupts>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015e0:	d122      	bne.n	8001628 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001608:	2100      	movs	r1, #0
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fea4 	bl	8002358 <HAL_PCDEx_LPM_Callback>
 8001610:	e002      	b.n	8001618 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f005 f91c 	bl	8006850 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fcc3 	bl	8003fb8 <USB_ReadInterrupts>
 8001632:	4603      	mov	r3, r0
 8001634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800163c:	d112      	bne.n	8001664 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f005 f8d8 	bl	8006804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001662:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fca5 	bl	8003fb8 <USB_ReadInterrupts>
 800166e:	4603      	mov	r3, r0
 8001670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001678:	f040 80b7 	bne.w	80017ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2110      	movs	r1, #16
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fd72 	bl	8003180 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a0:	e046      	b.n	8001730 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ae:	461a      	mov	r2, r3
 80016b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016c6:	0151      	lsls	r1, r2, #5
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	440a      	add	r2, r1
 80016cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016e2:	461a      	mov	r2, r3
 80016e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016fa:	0151      	lsls	r1, r2, #5
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	440a      	add	r2, r1
 8001700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001704:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001708:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171a:	0151      	lsls	r1, r2, #5
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	440a      	add	r2, r1
 8001720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001724:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001728:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172c:	3301      	adds	r3, #1
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	461a      	mov	r2, r3
 8001736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001738:	4293      	cmp	r3, r2
 800173a:	d3b2      	bcc.n	80016a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800174a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800174e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7bdb      	ldrb	r3, [r3, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d016      	beq.n	8001786 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800175e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001768:	f043 030b 	orr.w	r3, r3, #11
 800176c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800177e:	f043 030b 	orr.w	r3, r3, #11
 8001782:	6453      	str	r3, [r2, #68]	@ 0x44
 8001784:	e015      	b.n	80017b2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001794:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001798:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800179c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ac:	f043 030b 	orr.w	r3, r3, #11
 80017b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017c0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017d4:	461a      	mov	r2, r3
 80017d6:	f002 fcb3 	bl	8004140 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80017e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fbe2 	bl	8003fb8 <USB_ReadInterrupts>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017fe:	d123      	bne.n	8001848 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fc78 	bl	80040fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f001 fd2f 	bl	8003272 <USB_GetDevSpeed>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681c      	ldr	r4, [r3, #0]
 8001820:	f001 f9ca 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8001824:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800182a:	461a      	mov	r2, r3
 800182c:	4620      	mov	r0, r4
 800182e:	f001 fa33 	bl	8002c98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f004 ffc7 	bl	80067c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001846:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fbb3 	bl	8003fb8 <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d10a      	bne.n	8001872 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 ffa4 	bl	80067aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f002 0208 	and.w	r2, r2, #8
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fb9e 	bl	8003fb8 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001882:	2b80      	cmp	r3, #128	@ 0x80
 8001884:	d123      	bne.n	80018ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
 8001896:	e014      	b.n	80018c2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb0a 	bl	8001ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	3301      	adds	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	461a      	mov	r2, r3
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d3e4      	bcc.n	8001898 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fb70 	bl	8003fb8 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018e2:	d13c      	bne.n	800195e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e4:	2301      	movs	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e8:	e02b      	b.n	8001942 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	015a      	lsls	r2, r3, #5
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	3318      	adds	r3, #24
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d115      	bne.n	800193c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001910:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	da12      	bge.n	800193c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3317      	adds	r3, #23
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 faca 	bl	8001ed0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	3301      	adds	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	4293      	cmp	r3, r2
 800194c:	d3cd      	bcc.n	80018ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fb28 	bl	8003fb8 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001972:	d156      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
 8001978:	e045      	b.n	8001a06 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d12e      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da2b      	bge.n	8001a00 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	0c1a      	lsrs	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019b2:	4053      	eors	r3, r2
 80019b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d121      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10a      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019fc:	6053      	str	r3, [r2, #4]
            break;
 80019fe:	e008      	b.n	8001a12 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	3301      	adds	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	791b      	ldrb	r3, [r3, #4]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d3b3      	bcc.n	800197a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fac6 	bl	8003fb8 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a36:	d10a      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f004 ff3b 	bl	80068b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fab0 	bl	8003fb8 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d115      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f004 ff2b 	bl	80068d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	e000      	b.n	8001a8e <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a8c:	bf00      	nop
    }
  }
}
 8001a8e:	3734      	adds	r7, #52	@ 0x34
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}

08001a94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_PCD_SetAddress+0x1a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e012      	b.n	8001ad4 <HAL_PCD_SetAddress+0x40>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fa0f 	bl	8003ee8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	70fb      	strb	r3, [r7, #3]
 8001aee:	460b      	mov	r3, r1
 8001af0:	803b      	strh	r3, [r7, #0]
 8001af2:	4613      	mov	r3, r2
 8001af4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da0f      	bge.n	8001b22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3310      	adds	r3, #16
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
 8001b20:	e00f      	b.n	8001b42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b4e:	883b      	ldrh	r3, [r7, #0]
 8001b50:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	78ba      	ldrb	r2, [r7, #2]
 8001b5c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b70:	78bb      	ldrb	r3, [r7, #2]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d102      	bne.n	8001b7c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_PCD_EP_Open+0xae>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e00e      	b.n	8001ba8 <HAL_PCD_EP_Open+0xcc>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68f9      	ldr	r1, [r7, #12]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fb8f 	bl	80032bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	da0f      	bge.n	8001be4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 020f 	and.w	r2, r3, #15
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	3310      	adds	r3, #16
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	705a      	strb	r2, [r3, #1]
 8001be2:	e00f      	b.n	8001c04 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_PCD_EP_Close+0x6e>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e00e      	b.n	8001c3c <HAL_PCD_EP_Close+0x8c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fbcd 	bl	80033cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 020f 	and.w	r2, r3, #15
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2200      	movs	r2, #0
 8001c84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	799b      	ldrb	r3, [r3, #6]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	799b      	ldrb	r3, [r3, #6]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	6979      	ldr	r1, [r7, #20]
 8001cac:	f001 fc6a 	bl	8003584 <USB_EPStartXfer>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001cdc:	681b      	ldr	r3, [r3, #0]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	f003 020f 	and.w	r2, r3, #15
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	3310      	adds	r3, #16
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2200      	movs	r2, #0
 8001d22:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2201      	movs	r2, #1
 8001d28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	799b      	ldrb	r3, [r3, #6]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	799b      	ldrb	r3, [r3, #6]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	f001 fc18 	bl	8003584 <USB_EPStartXfer>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	7912      	ldrb	r2, [r2, #4]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e04f      	b.n	8001e1c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da0f      	bge.n	8001da4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	3310      	adds	r3, #16
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	705a      	strb	r2, [r3, #1]
 8001da2:	e00d      	b.n	8001dc0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_PCD_EP_SetStall+0x82>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e01d      	b.n	8001e1c <HAL_PCD_EP_SetStall+0xbe>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 ffa6 	bl	8003d40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7999      	ldrb	r1, [r3, #6]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f002 f997 	bl	8004140 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	7912      	ldrb	r2, [r2, #4]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e042      	b.n	8001ec8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da0f      	bge.n	8001e6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	3310      	adds	r3, #16
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	705a      	strb	r2, [r3, #1]
 8001e68:	e00f      	b.n	8001e8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 020f 	and.w	r2, r3, #15
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_PCD_EP_ClrStall+0x86>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e00e      	b.n	8001ec8 <HAL_PCD_EP_ClrStall+0xa4>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 ffaf 	bl	8003e1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da0c      	bge.n	8001efe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 020f 	and.w	r2, r3, #15
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3310      	adds	r3, #16
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e00c      	b.n	8001f18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68f9      	ldr	r1, [r7, #12]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 fdce 	bl	8003ac0 <USB_EPStopXfer>
 8001f24:	4603      	mov	r3, r0
 8001f26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b08a      	sub	sp, #40	@ 0x28
 8001f36:	af02      	add	r7, sp, #8
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	3310      	adds	r3, #16
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	3304      	adds	r3, #4
 8001f58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d901      	bls.n	8001f6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d902      	bls.n	8001f86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f8e:	e02a      	b.n	8001fe6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d902      	bls.n	8001fac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68d9      	ldr	r1, [r3, #12]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f001 fe23 	bl	8003c14 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	441a      	add	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d809      	bhi.n	8002010 <PCD_WriteEmptyTxFifo+0xde>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002004:	429a      	cmp	r2, r3
 8002006:	d203      	bcs.n	8002010 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1bf      	bne.n	8001f90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	d811      	bhi.n	8002040 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	2201      	movs	r2, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	43db      	mvns	r3, r3
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800203c:	4013      	ands	r3, r2
 800203e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3720      	adds	r7, #32
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	333c      	adds	r3, #60	@ 0x3c
 8002064:	3304      	adds	r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	799b      	ldrb	r3, [r3, #6]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d17b      	bne.n	800217a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f003 0308 	and.w	r3, r3, #8
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4a61      	ldr	r2, [pc, #388]	@ (8002214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f240 80b9 	bls.w	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80b3 	beq.w	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ae:	461a      	mov	r2, r3
 80020b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020b4:	6093      	str	r3, [r2, #8]
 80020b6:	e0a7      	b.n	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ce:	461a      	mov	r2, r3
 80020d0:	2320      	movs	r3, #32
 80020d2:	6093      	str	r3, [r2, #8]
 80020d4:	e098      	b.n	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 8093 	bne.w	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002214 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d90f      	bls.n	800210a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002100:	461a      	mov	r2, r3
 8002102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002106:	6093      	str	r3, [r2, #8]
 8002108:	e07e      	b.n	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	0159      	lsls	r1, r3, #5
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	440b      	add	r3, r1
 800212c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d114      	bne.n	800216c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002154:	461a      	mov	r2, r3
 8002156:	2101      	movs	r1, #1
 8002158:	f001 fff2 	bl	8004140 <USB_EP0_OutStart>
 800215c:	e006      	b.n	800216c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	441a      	add	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f004 fae4 	bl	8006740 <HAL_PCD_DataOutStageCallback>
 8002178:	e046      	b.n	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	4a26      	ldr	r2, [pc, #152]	@ (8002218 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d124      	bne.n	80021cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002198:	461a      	mov	r2, r3
 800219a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	e032      	b.n	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b8:	461a      	mov	r2, r3
 80021ba:	2320      	movs	r3, #32
 80021bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f004 fabb 	bl	8006740 <HAL_PCD_DataOutStageCallback>
 80021ca:	e01d      	b.n	8002208 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d114      	bne.n	80021fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021f4:	461a      	mov	r2, r3
 80021f6:	2100      	movs	r1, #0
 80021f8:	f001 ffa2 	bl	8004140 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f004 fa9c 	bl	8006740 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	4f54300a 	.word	0x4f54300a
 8002218:	4f54310a 	.word	0x4f54310a

0800221c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	333c      	adds	r3, #60	@ 0x3c
 8002234:	3304      	adds	r3, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a15      	ldr	r2, [pc, #84]	@ (80022a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d90e      	bls.n	8002270 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800226e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f004 fa53 	bl	800671c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d90c      	bls.n	8002298 <PCD_EP_OutSetupPacket_int+0x7c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	799b      	ldrb	r3, [r3, #6]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002290:	461a      	mov	r2, r3
 8002292:	2101      	movs	r1, #1
 8002294:	f001 ff54 	bl	8004140 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	4f54300a 	.word	0x4f54300a

080022a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
 80022b4:	4613      	mov	r3, r2
 80022b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d107      	bne.n	80022d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022c6:	883b      	ldrh	r3, [r7, #0]
 80022c8:	0419      	lsls	r1, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80022d4:	e028      	b.n	8002328 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e00d      	b.n	8002306 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3340      	adds	r3, #64	@ 0x40
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	3301      	adds	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	3b01      	subs	r3, #1
 800230c:	429a      	cmp	r2, r3
 800230e:	d3ec      	bcc.n	80022ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002310:	883b      	ldrh	r3, [r7, #0]
 8002312:	0418      	lsls	r0, r3, #16
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6819      	ldr	r1, [r3, #0]
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	3b01      	subs	r3, #1
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	4302      	orrs	r2, r0
 8002320:	3340      	adds	r3, #64	@ 0x40
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e267      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d075      	beq.n	800247a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b04      	cmp	r3, #4
 8002398:	d00c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b85      	ldr	r3, [pc, #532]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a6:	4b82      	ldr	r3, [pc, #520]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b2:	d10b      	bne.n	80023cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	4b7e      	ldr	r3, [pc, #504]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05b      	beq.n	8002478 <HAL_RCC_OscConfig+0x108>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d157      	bne.n	8002478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e242      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x74>
 80023d6:	4b76      	ldr	r3, [pc, #472]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a75      	ldr	r2, [pc, #468]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xb0>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x98>
 80023ee:	4b70      	ldr	r3, [pc, #448]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6f      	ldr	r2, [pc, #444]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b6d      	ldr	r3, [pc, #436]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6c      	ldr	r2, [pc, #432]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xb0>
 8002408:	4b69      	ldr	r3, [pc, #420]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a68      	ldr	r2, [pc, #416]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b66      	ldr	r3, [pc, #408]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a65      	ldr	r2, [pc, #404]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fa56 	bl	80008d8 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fa52 	bl	80008d8 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e207      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b5b      	ldr	r3, [pc, #364]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xc0>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fa42 	bl	80008d8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fa3e 	bl	80008d8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1f3      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b51      	ldr	r3, [pc, #324]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0xe8>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d063      	beq.n	800254e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b47      	ldr	r3, [pc, #284]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800249a:	2b08      	cmp	r3, #8
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249e:	4b44      	ldr	r3, [pc, #272]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x152>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1c7      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4937      	ldr	r1, [pc, #220]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e03a      	b.n	800254e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <HAL_RCC_OscConfig+0x244>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe f9f7 	bl	80008d8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe f9f3 	bl	80008d8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1a8      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4925      	ldr	r1, [pc, #148]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e015      	b.n	800254e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x244>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe f9d6 	bl	80008d8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7fe f9d2 	bl	80008d8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e187      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_RCC_OscConfig+0x248>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe f9b6 	bl	80008d8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7fe f9b2 	bl	80008d8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e167      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_OscConfig+0x240>)
 8002584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x200>
 800258e:	e01b      	b.n	80025c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_OscConfig+0x248>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe f99f 	bl	80008d8 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	e00e      	b.n	80025bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259e:	f7fe f99b 	bl	80008d8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d907      	bls.n	80025bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e150      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	42470000 	.word	0x42470000
 80025b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ea      	bne.n	800259e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8097 	beq.w	8002704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b81      	ldr	r3, [pc, #516]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b7d      	ldr	r3, [pc, #500]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a7c      	ldr	r2, [pc, #496]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b7a      	ldr	r3, [pc, #488]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b77      	ldr	r3, [pc, #476]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b74      	ldr	r3, [pc, #464]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a73      	ldr	r2, [pc, #460]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe f95b 	bl	80008d8 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe f957 	bl	80008d8 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e10c      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b6a      	ldr	r3, [pc, #424]	@ (80027e4 <HAL_RCC_OscConfig+0x474>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x2ea>
 800264c:	4b64      	ldr	r3, [pc, #400]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	4a63      	ldr	r2, [pc, #396]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	@ 0x70
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x324>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x30c>
 8002662:	4b5f      	ldr	r3, [pc, #380]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a5e      	ldr	r2, [pc, #376]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	4b5c      	ldr	r3, [pc, #368]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	4a5b      	ldr	r2, [pc, #364]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	@ 0x70
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0x324>
 800267c:	4b58      	ldr	r3, [pc, #352]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a57      	ldr	r2, [pc, #348]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
 8002688:	4b55      	ldr	r3, [pc, #340]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	4a54      	ldr	r2, [pc, #336]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe f91c 	bl	80008d8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7fe f918 	bl	80008d8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0cb      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	4b49      	ldr	r3, [pc, #292]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ee      	beq.n	80026a4 <HAL_RCC_OscConfig+0x334>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe f906 	bl	80008d8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe f902 	bl	80008d8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0b5      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	4b3e      	ldr	r3, [pc, #248]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ee      	bne.n	80026d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b39      	ldr	r3, [pc, #228]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	4a38      	ldr	r2, [pc, #224]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a1 	beq.w	8002850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270e:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b08      	cmp	r3, #8
 8002718:	d05c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d141      	bne.n	80027a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe f8d6 	bl	80008d8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe f8d2 	bl	80008d8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e087      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	491b      	ldr	r1, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <HAL_RCC_OscConfig+0x478>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe f8ab 	bl	80008d8 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002786:	f7fe f8a7 	bl	80008d8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e05c      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x416>
 80027a4:	e054      	b.n	8002850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <HAL_RCC_OscConfig+0x478>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe f894 	bl	80008d8 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe f890 	bl	80008d8 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e045      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x444>
 80027d2:	e03d      	b.n	8002850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e038      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000
 80027e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4ec>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d028      	beq.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d121      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d11a      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002824:	4293      	cmp	r3, r2
 8002826:	d111      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0cc      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b68      	ldr	r3, [pc, #416]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d90c      	bls.n	800289c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b65      	ldr	r3, [pc, #404]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a58      	ldr	r2, [pc, #352]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d044      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d119      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	2b03      	cmp	r3, #3
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e067      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b37      	ldr	r3, [pc, #220]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4934      	ldr	r1, [pc, #208]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fd ffc2 	bl	80008d8 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fd ffbe 	bl	80008d8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e04f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d20c      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f821 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd ff22 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08006d54 	.word	0x08006d54
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a30:	b090      	sub	sp, #64	@ 0x40
 8002a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a44:	4b59      	ldr	r3, [pc, #356]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x180>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d00d      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x40>
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	f200 80a1 	bhi.w	8002b98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a5e:	e09b      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a60:	4b53      	ldr	r3, [pc, #332]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a64:	e09b      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a66:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a6a:	e098      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a76:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x180>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x180>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	099b      	lsrs	r3, r3, #6
 8002a88:	2200      	movs	r2, #0
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a94:	2100      	movs	r1, #0
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a98:	fb03 f201 	mul.w	r2, r3, r1
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	fb00 f303 	mul.w	r3, r0, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a43      	ldr	r2, [pc, #268]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa6:	fba0 1202 	umull	r1, r2, r0, r2
 8002aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aac:	460a      	mov	r2, r1
 8002aae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab2:	4413      	add	r3, r2
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	61fa      	str	r2, [r7, #28]
 8002abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ac6:	f7fd fb87 	bl	80001d8 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4613      	mov	r3, r2
 8002ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad2:	e053      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad4:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	2200      	movs	r2, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	617a      	str	r2, [r7, #20]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ae6:	f04f 0b00 	mov.w	fp, #0
 8002aea:	4652      	mov	r2, sl
 8002aec:	465b      	mov	r3, fp
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	f04f 0100 	mov.w	r1, #0
 8002af6:	0159      	lsls	r1, r3, #5
 8002af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afc:	0150      	lsls	r0, r2, #5
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	ebb2 080a 	subs.w	r8, r2, sl
 8002b06:	eb63 090b 	sbc.w	r9, r3, fp
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b22:	eb63 0509 	sbc.w	r5, r3, r9
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	00eb      	lsls	r3, r5, #3
 8002b30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b34:	00e2      	lsls	r2, r4, #3
 8002b36:	4614      	mov	r4, r2
 8002b38:	461d      	mov	r5, r3
 8002b3a:	eb14 030a 	adds.w	r3, r4, sl
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	eb45 030b 	adc.w	r3, r5, fp
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b52:	4629      	mov	r1, r5
 8002b54:	028b      	lsls	r3, r1, #10
 8002b56:	4621      	mov	r1, r4
 8002b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	028a      	lsls	r2, r1, #10
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b66:	2200      	movs	r2, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	60fa      	str	r2, [r7, #12]
 8002b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b70:	f7fd fb32 	bl	80001d8 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002b8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3740      	adds	r7, #64	@ 0x40
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	017d7840 	.word	0x017d7840

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	f107 001c 	add.w	r0, r7, #28
 8002bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002be2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d123      	bne.n	8002c32 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f001 fae8 	bl	80041fc <USB_CoreReset>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e01b      	b.n	8002c6a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f001 fadc 	bl	80041fc <USB_CoreReset>
 8002c44:	4603      	mov	r3, r0
 8002c46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c5c:	e005      	b.n	8002c6a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c6a:	7fbb      	ldrb	r3, [r7, #30]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10b      	bne.n	8002c88 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f043 0206 	orr.w	r2, r3, #6
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c94:	b004      	add	sp, #16
 8002c96:	4770      	bx	lr

08002c98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d165      	bne.n	8002d78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a41      	ldr	r2, [pc, #260]	@ (8002db4 <USB_SetTurnaroundTime+0x11c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d906      	bls.n	8002cc2 <USB_SetTurnaroundTime+0x2a>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <USB_SetTurnaroundTime+0x120>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d202      	bcs.n	8002cc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002cbc:	230f      	movs	r3, #15
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e062      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8002db8 <USB_SetTurnaroundTime+0x120>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d306      	bcc.n	8002cd8 <USB_SetTurnaroundTime+0x40>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8002dbc <USB_SetTurnaroundTime+0x124>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d202      	bcs.n	8002cd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cd2:	230e      	movs	r3, #14
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e057      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a38      	ldr	r2, [pc, #224]	@ (8002dbc <USB_SetTurnaroundTime+0x124>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d306      	bcc.n	8002cee <USB_SetTurnaroundTime+0x56>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a37      	ldr	r2, [pc, #220]	@ (8002dc0 <USB_SetTurnaroundTime+0x128>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d202      	bcs.n	8002cee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ce8:	230d      	movs	r3, #13
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e04c      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <USB_SetTurnaroundTime+0x128>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d306      	bcc.n	8002d04 <USB_SetTurnaroundTime+0x6c>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	@ (8002dc4 <USB_SetTurnaroundTime+0x12c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cfe:	230c      	movs	r3, #12
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e041      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc4 <USB_SetTurnaroundTime+0x12c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d906      	bls.n	8002d1a <USB_SetTurnaroundTime+0x82>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc8 <USB_SetTurnaroundTime+0x130>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d802      	bhi.n	8002d1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d14:	230b      	movs	r3, #11
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	e036      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc8 <USB_SetTurnaroundTime+0x130>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d906      	bls.n	8002d30 <USB_SetTurnaroundTime+0x98>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a29      	ldr	r2, [pc, #164]	@ (8002dcc <USB_SetTurnaroundTime+0x134>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d802      	bhi.n	8002d30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e02b      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <USB_SetTurnaroundTime+0x134>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d906      	bls.n	8002d46 <USB_SetTurnaroundTime+0xae>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	@ (8002dd0 <USB_SetTurnaroundTime+0x138>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d202      	bcs.n	8002d46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d40:	2309      	movs	r3, #9
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e020      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a21      	ldr	r2, [pc, #132]	@ (8002dd0 <USB_SetTurnaroundTime+0x138>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d306      	bcc.n	8002d5c <USB_SetTurnaroundTime+0xc4>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a20      	ldr	r2, [pc, #128]	@ (8002dd4 <USB_SetTurnaroundTime+0x13c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d802      	bhi.n	8002d5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d56:	2308      	movs	r3, #8
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e015      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <USB_SetTurnaroundTime+0x13c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d906      	bls.n	8002d72 <USB_SetTurnaroundTime+0xda>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd8 <USB_SetTurnaroundTime+0x140>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d202      	bcs.n	8002d72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e00a      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d72:	2306      	movs	r3, #6
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e007      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d7e:	2309      	movs	r3, #9
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e001      	b.n	8002d88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d84:	2309      	movs	r3, #9
 8002d86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	00d8acbf 	.word	0x00d8acbf
 8002db8:	00e4e1c0 	.word	0x00e4e1c0
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	01067380 	.word	0x01067380
 8002dc4:	011a499f 	.word	0x011a499f
 8002dc8:	01312cff 	.word	0x01312cff
 8002dcc:	014ca43f 	.word	0x014ca43f
 8002dd0:	016e3600 	.word	0x016e3600
 8002dd4:	01a6ab1f 	.word	0x01a6ab1f
 8002dd8:	01e84800 	.word	0x01e84800

08002ddc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d115      	bne.n	8002e6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e4e:	200a      	movs	r0, #10
 8002e50:	f7fd fd4e 	bl	80008f0 <HAL_Delay>
      ms += 10U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	330a      	adds	r3, #10
 8002e58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f001 f93f 	bl	80040de <USB_GetMode>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d01e      	beq.n	8002ea4 <USB_SetCurrentMode+0x84>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e6a:	d9f0      	bls.n	8002e4e <USB_SetCurrentMode+0x2e>
 8002e6c:	e01a      	b.n	8002ea4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f7fd fd35 	bl	80008f0 <HAL_Delay>
      ms += 10U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	330a      	adds	r3, #10
 8002e8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f001 f926 	bl	80040de <USB_GetMode>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <USB_SetCurrentMode+0x84>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002e9c:	d9f0      	bls.n	8002e80 <USB_SetCurrentMode+0x60>
 8002e9e:	e001      	b.n	8002ea4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e005      	b.n	8002eb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ea8:	d101      	bne.n	8002eae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002eb8:	b084      	sub	sp, #16
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e009      	b.n	8002eec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	3340      	adds	r3, #64	@ 0x40
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0e      	cmp	r3, #14
 8002ef0:	d9f2      	bls.n	8002ed8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ef2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11c      	bne.n	8002f34 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f32:	e00b      	b.n	8002f4c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f52:	461a      	mov	r2, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10d      	bne.n	8002f7c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d104      	bne.n	8002f72 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f968 	bl	8003240 <USB_SetDevSpeed>
 8002f70:	e008      	b.n	8002f84 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f72:	2101      	movs	r1, #1
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f963 	bl	8003240 <USB_SetDevSpeed>
 8002f7a:	e003      	b.n	8002f84 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f95e 	bl	8003240 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f84:	2110      	movs	r1, #16
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8fa 	bl	8003180 <USB_FlushTxFifo>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f924 	bl	80031e4 <USB_FlushRxFifo>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fac:	461a      	mov	r2, r3
 8002fae:	2300      	movs	r3, #0
 8002fb0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e043      	b.n	8003058 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fe6:	d118      	bne.n	800301a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e013      	b.n	800302c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e008      	b.n	800302c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	2300      	movs	r3, #0
 800303c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800304a:	461a      	mov	r2, r3
 800304c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003050:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	3301      	adds	r3, #1
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800305c:	461a      	mov	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4293      	cmp	r3, r2
 8003062:	d3b5      	bcc.n	8002fd0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	e043      	b.n	80030f2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800307c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003080:	d118      	bne.n	80030b4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	e013      	b.n	80030c6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e008      	b.n	80030c6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	2300      	movs	r3, #0
 80030c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	3301      	adds	r3, #1
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030f6:	461a      	mov	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d3b5      	bcc.n	800306a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800310c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003110:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800311e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003120:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f043 0210 	orr.w	r2, r3, #16
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b10      	ldr	r3, [pc, #64]	@ (800317c <USB_DevInit+0x2c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003140:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f043 0208 	orr.w	r2, r3, #8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003154:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800316c:	7dfb      	ldrb	r3, [r7, #23]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003178:	b004      	add	sp, #16
 800317a:	4770      	bx	lr
 800317c:	803c3800 	.word	0x803c3800

08003180 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800319a:	d901      	bls.n	80031a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e01b      	b.n	80031d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	daf2      	bge.n	800318e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	019b      	lsls	r3, r3, #6
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031c4:	d901      	bls.n	80031ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e006      	b.n	80031d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d0f0      	beq.n	80031b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80031fc:	d901      	bls.n	8003202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e018      	b.n	8003234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	daf2      	bge.n	80031f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2210      	movs	r2, #16
 8003212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3301      	adds	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003220:	d901      	bls.n	8003226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e006      	b.n	8003234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d0f0      	beq.n	8003214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003272:	b480      	push	{r7}
 8003274:	b087      	sub	sp, #28
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0306 	and.w	r3, r3, #6
 800328a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
 8003296:	e00a      	b.n	80032ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d002      	beq.n	80032a4 <USB_GetDevSpeed+0x32>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d102      	bne.n	80032aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032a4:	2302      	movs	r3, #2
 80032a6:	75fb      	strb	r3, [r7, #23]
 80032a8:	e001      	b.n	80032ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80032aa:	230f      	movs	r3, #15
 80032ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d13a      	bne.n	800334e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d155      	bne.n	80033bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	791b      	ldrb	r3, [r3, #4]
 800332a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800332c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	059b      	lsls	r3, r3, #22
 8003332:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003334:	4313      	orrs	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	440a      	add	r2, r1
 800333e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e036      	b.n	80033bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11a      	bne.n	80033bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	791b      	ldrb	r3, [r3, #4]
 80033a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033a2:	430b      	orrs	r3, r1
 80033a4:	4313      	orrs	r3, r2
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	0151      	lsls	r1, r2, #5
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	440a      	add	r2, r1
 80033ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d161      	bne.n	80034ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033fe:	d11f      	bne.n	8003440 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	440a      	add	r2, r1
 8003416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800341a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800341e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800343a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800343e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003460:	4013      	ands	r3, r2
 8003462:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003484:	4013      	ands	r3, r2
 8003486:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0159      	lsls	r1, r3, #5
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	440b      	add	r3, r1
 800349e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a2:	4619      	mov	r1, r3
 80034a4:	4b35      	ldr	r3, [pc, #212]	@ (800357c <USB_DeactivateEndpoint+0x1b0>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
 80034aa:	e060      	b.n	800356e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034c2:	d11f      	bne.n	8003504 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	0151      	lsls	r1, r2, #5
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	440a      	add	r2, r1
 80034da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	0151      	lsls	r1, r2, #5
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	440a      	add	r2, r1
 80034fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800350a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	43db      	mvns	r3, r3
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003524:	4013      	ands	r3, r2
 8003526:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	43db      	mvns	r3, r3
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003548:	4013      	ands	r3, r2
 800354a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	0159      	lsls	r1, r3, #5
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	440b      	add	r3, r1
 8003562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003566:	4619      	mov	r1, r3
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <USB_DeactivateEndpoint+0x1b4>)
 800356a:	4013      	ands	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	ec337800 	.word	0xec337800
 8003580:	eff37800 	.word	0xeff37800

08003584 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f040 817f 	bne.w	80038a4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d132      	bne.n	8003614 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80035cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80035d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	0151      	lsls	r1, r2, #5
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	440a      	add	r2, r1
 80035e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	440a      	add	r2, r1
 8003608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800360c:	0cdb      	lsrs	r3, r3, #19
 800360e:	04db      	lsls	r3, r3, #19
 8003610:	6113      	str	r3, [r2, #16]
 8003612:	e097      	b.n	8003744 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800362e:	0cdb      	lsrs	r3, r3, #19
 8003630:	04db      	lsls	r3, r3, #19
 8003632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	440a      	add	r2, r1
 800364a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800364e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003652:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003656:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11a      	bne.n	8003694 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d903      	bls.n	8003672 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	440a      	add	r2, r1
 8003688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800368c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003690:	6113      	str	r3, [r2, #16]
 8003692:	e044      	b.n	800371e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4413      	add	r3, r2
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	8afb      	ldrh	r3, [r7, #22]
 80036ba:	04d9      	lsls	r1, r3, #19
 80036bc:	4ba4      	ldr	r3, [pc, #656]	@ (8003950 <USB_EPStartXfer+0x3cc>)
 80036be:	400b      	ands	r3, r1
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	0148      	lsls	r0, r1, #5
 80036c4:	69f9      	ldr	r1, [r7, #28]
 80036c6:	4401      	add	r1, r0
 80036c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036cc:	4313      	orrs	r3, r2
 80036ce:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	791b      	ldrb	r3, [r3, #4]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d122      	bne.n	800371e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036f2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80036f6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	8afb      	ldrh	r3, [r7, #22]
 8003708:	075b      	lsls	r3, r3, #29
 800370a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800370e:	69b9      	ldr	r1, [r7, #24]
 8003710:	0148      	lsls	r0, r1, #5
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	4401      	add	r1, r0
 8003716:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	0148      	lsls	r0, r1, #5
 8003738:	69f9      	ldr	r1, [r7, #28]
 800373a:	4401      	add	r1, r0
 800373c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d14b      	bne.n	80037e2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	791b      	ldrb	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d128      	bne.n	80037c0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d110      	bne.n	80037a0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	440a      	add	r2, r1
 8003794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003798:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e00f      	b.n	80037c0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	0151      	lsls	r1, r2, #5
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	440a      	add	r2, r1
 80037b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e166      	b.n	8003ab0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003800:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	791b      	ldrb	r3, [r3, #4]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d015      	beq.n	8003836 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 814e 	beq.w	8003ab0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	69f9      	ldr	r1, [r7, #28]
 800382c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003830:	4313      	orrs	r3, r2
 8003832:	634b      	str	r3, [r1, #52]	@ 0x34
 8003834:	e13c      	b.n	8003ab0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d110      	bne.n	8003868 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	440a      	add	r2, r1
 800385c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003860:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	e00f      	b.n	8003888 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	0151      	lsls	r1, r2, #5
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	440a      	add	r2, r1
 800387e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003886:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	68d9      	ldr	r1, [r3, #12]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	b298      	uxth	r0, r3
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	4603      	mov	r3, r0
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f9b9 	bl	8003c14 <USB_WritePacket>
 80038a2:	e105      	b.n	8003ab0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038be:	0cdb      	lsrs	r3, r3, #19
 80038c0:	04db      	lsls	r3, r3, #19
 80038c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	0151      	lsls	r1, r2, #5
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	440a      	add	r2, r1
 80038da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80038e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80038e6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d132      	bne.n	8003954 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391c:	69b9      	ldr	r1, [r7, #24]
 800391e:	0148      	lsls	r0, r1, #5
 8003920:	69f9      	ldr	r1, [r7, #28]
 8003922:	4401      	add	r1, r0
 8003924:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003928:	4313      	orrs	r3, r2
 800392a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	440a      	add	r2, r1
 8003942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003946:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800394a:	6113      	str	r3, [r2, #16]
 800394c:	e062      	b.n	8003a14 <USB_EPStartXfer+0x490>
 800394e:	bf00      	nop
 8003950:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d123      	bne.n	80039a4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003972:	69b9      	ldr	r1, [r7, #24]
 8003974:	0148      	lsls	r0, r1, #5
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	4401      	add	r1, r0
 800397a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800397e:	4313      	orrs	r3, r2
 8003980:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	440a      	add	r2, r1
 8003998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800399c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80039a0:	6113      	str	r3, [r2, #16]
 80039a2:	e037      	b.n	8003a14 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4413      	add	r3, r2
 80039ae:	1e5a      	subs	r2, r3, #1
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	8afa      	ldrh	r2, [r7, #22]
 80039c0:	fb03 f202 	mul.w	r2, r3, r2
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	8afb      	ldrh	r3, [r7, #22]
 80039d8:	04d9      	lsls	r1, r3, #19
 80039da:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <USB_EPStartXfer+0x538>)
 80039dc:	400b      	ands	r3, r1
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	0148      	lsls	r0, r1, #5
 80039e2:	69f9      	ldr	r1, [r7, #28]
 80039e4:	4401      	add	r1, r0
 80039e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	0148      	lsls	r0, r1, #5
 8003a08:	69f9      	ldr	r1, [r7, #28]
 8003a0a:	4401      	add	r1, r0
 8003a0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003a10:	4313      	orrs	r3, r2
 8003a12:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d10d      	bne.n	8003a36 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	68d9      	ldr	r1, [r3, #12]
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	460a      	mov	r2, r1
 8003a34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	791b      	ldrb	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d128      	bne.n	8003a90 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d110      	bne.n	8003a70 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	0151      	lsls	r1, r2, #5
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	440a      	add	r2, r1
 8003a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00f      	b.n	8003a90 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aaa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	1ff80000 	.word	0x1ff80000

08003ac0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d14a      	bne.n	8003b74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af6:	f040 8086 	bne.w	8003c06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d902      	bls.n	8003b58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
          break;
 8003b56:	e056      	b.n	8003c06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b70:	d0e7      	beq.n	8003b42 <USB_EPStopXfer+0x82>
 8003b72:	e048      	b.n	8003c06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b8c:	d13b      	bne.n	8003c06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	0151      	lsls	r1, r2, #5
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	7812      	ldrb	r2, [r2, #0]
 8003bc6:	0151      	lsls	r1, r2, #5
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	440a      	add	r2, r1
 8003bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d902      	bls.n	8003bec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
          break;
 8003bea:	e00c      	b.n	8003c06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c04:	d0e7      	beq.n	8003bd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	@ 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	460b      	mov	r3, r1
 8003c24:	71fb      	strb	r3, [r7, #7]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d123      	bne.n	8003c82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c3a:	88bb      	ldrh	r3, [r7, #4]
 8003c3c:	3303      	adds	r3, #3
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	e018      	b.n	8003c7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	031a      	lsls	r2, r3, #12
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c54:	461a      	mov	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	3301      	adds	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3301      	adds	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3e2      	bcc.n	8003c48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3724      	adds	r7, #36	@ 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	089b      	lsrs	r3, r3, #2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	e014      	b.n	8003ce6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	3301      	adds	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	3301      	adds	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3e6      	bcc.n	8003cbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cee:	8bfb      	ldrh	r3, [r7, #30]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01e      	beq.n	8003d32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f107 0310 	add.w	r3, r7, #16
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	701a      	strb	r2, [r3, #0]
      i++;
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	3301      	adds	r3, #1
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003d26:	8bfb      	ldrh	r3, [r7, #30]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d2c:	8bfb      	ldrh	r3, [r7, #30]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ea      	bne.n	8003d08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	372c      	adds	r7, #44	@ 0x2c
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d12c      	bne.n	8003db6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	db12      	blt.n	8003d94 <USB_EPSetStall+0x54>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00f      	beq.n	8003d94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e02b      	b.n	8003e0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db12      	blt.n	8003dee <USB_EPSetStall+0xae>
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00f      	beq.n	8003dee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	0151      	lsls	r1, r2, #5
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	440a      	add	r2, r1
 8003e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d128      	bne.n	8003e8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	791b      	ldrb	r3, [r3, #4]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d003      	beq.n	8003e68 <USB_EPClearStall+0x4c>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d138      	bne.n	8003eda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	0151      	lsls	r1, r2, #5
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e027      	b.n	8003eda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ea4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ea8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	791b      	ldrb	r3, [r3, #4]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d003      	beq.n	8003eba <USB_EPClearStall+0x9e>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	791b      	ldrb	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d10f      	bne.n	8003eda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003f0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003f1c:	68f9      	ldr	r1, [r7, #12]
 8003f1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f62:	f023 0302 	bic.w	r3, r3, #2
 8003f66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f90:	f023 0303 	bic.w	r3, r3, #3
 8003f94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	0c1b      	lsrs	r3, r3, #16
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	b29b      	uxth	r3, r3
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004074:	68bb      	ldr	r3, [r7, #8]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004082:	b480      	push	{r7}
 8004084:	b087      	sub	sp, #28
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	460b      	mov	r3, r1
 800408c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	01db      	lsls	r3, r3, #7
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040d0:	68bb      	ldr	r3, [r7, #8]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0301 	and.w	r3, r3, #1
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004114:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004118:	f023 0307 	bic.w	r3, r3, #7
 800411c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800412c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	460b      	mov	r3, r1
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	333c      	adds	r3, #60	@ 0x3c
 8004156:	3304      	adds	r3, #4
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4a26      	ldr	r2, [pc, #152]	@ (80041f8 <USB_EP0_OutStart+0xb8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d90a      	bls.n	800417a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004174:	d101      	bne.n	800417a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e037      	b.n	80041ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004180:	461a      	mov	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004194:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004198:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041a8:	f043 0318 	orr.w	r3, r3, #24
 80041ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041bc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80041c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d10f      	bne.n	80041e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ce:	461a      	mov	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041e2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80041e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	4f54300a 	.word	0x4f54300a

080041fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004214:	d901      	bls.n	800421a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e022      	b.n	8004260 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	daf2      	bge.n	8004208 <USB_CoreReset+0xc>

  count = 10U;
 8004222:	230a      	movs	r3, #10
 8004224:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004226:	e002      	b.n	800422e <USB_CoreReset+0x32>
  {
    count--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3b01      	subs	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f9      	bne.n	8004228 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800424c:	d901      	bls.n	8004252 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e006      	b.n	8004260 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d0f0      	beq.n	8004240 <USB_CoreReset+0x44>

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004278:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800427c:	f002 fcc0 	bl	8006c00 <USBD_static_malloc>
 8004280:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	32b0      	adds	r2, #176	@ 0xb0
 8004292:	2100      	movs	r1, #0
 8004294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004298:	2302      	movs	r3, #2
 800429a:	e0d4      	b.n	8004446 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800429c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80042a0:	2100      	movs	r1, #0
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f002 fcf0 	bl	8006c88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	32b0      	adds	r2, #176	@ 0xb0
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	32b0      	adds	r2, #176	@ 0xb0
 80042c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7c1b      	ldrb	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d138      	bne.n	8004346 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80042d4:	4b5e      	ldr	r3, [pc, #376]	@ (8004450 <USBD_CDC_Init+0x1e4>)
 80042d6:	7819      	ldrb	r1, [r3, #0]
 80042d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042dc:	2202      	movs	r2, #2
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f002 fb6b 	bl	80069ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80042e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004450 <USBD_CDC_Init+0x1e4>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f003 020f 	and.w	r2, r3, #15
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3323      	adds	r3, #35	@ 0x23
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80042fe:	4b55      	ldr	r3, [pc, #340]	@ (8004454 <USBD_CDC_Init+0x1e8>)
 8004300:	7819      	ldrb	r1, [r3, #0]
 8004302:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004306:	2202      	movs	r2, #2
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f002 fb56 	bl	80069ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800430e:	4b51      	ldr	r3, [pc, #324]	@ (8004454 <USBD_CDC_Init+0x1e8>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800432a:	4b4b      	ldr	r3, [pc, #300]	@ (8004458 <USBD_CDC_Init+0x1ec>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	331c      	adds	r3, #28
 8004340:	2210      	movs	r2, #16
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e035      	b.n	80043b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004346:	4b42      	ldr	r3, [pc, #264]	@ (8004450 <USBD_CDC_Init+0x1e4>)
 8004348:	7819      	ldrb	r1, [r3, #0]
 800434a:	2340      	movs	r3, #64	@ 0x40
 800434c:	2202      	movs	r2, #2
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f002 fb33 	bl	80069ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004354:	4b3e      	ldr	r3, [pc, #248]	@ (8004450 <USBD_CDC_Init+0x1e4>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3323      	adds	r3, #35	@ 0x23
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800436e:	4b39      	ldr	r3, [pc, #228]	@ (8004454 <USBD_CDC_Init+0x1e8>)
 8004370:	7819      	ldrb	r1, [r3, #0]
 8004372:	2340      	movs	r3, #64	@ 0x40
 8004374:	2202      	movs	r2, #2
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f002 fb1f 	bl	80069ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800437c:	4b35      	ldr	r3, [pc, #212]	@ (8004454 <USBD_CDC_Init+0x1e8>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004398:	4b2f      	ldr	r3, [pc, #188]	@ (8004458 <USBD_CDC_Init+0x1ec>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f003 020f 	and.w	r2, r3, #15
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	331c      	adds	r3, #28
 80043ae:	2210      	movs	r2, #16
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80043b2:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <USBD_CDC_Init+0x1ec>)
 80043b4:	7819      	ldrb	r1, [r3, #0]
 80043b6:	2308      	movs	r3, #8
 80043b8:	2203      	movs	r2, #3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f002 fafd 	bl	80069ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80043c0:	4b25      	ldr	r3, [pc, #148]	@ (8004458 <USBD_CDC_Init+0x1ec>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	3323      	adds	r3, #35	@ 0x23
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	33b0      	adds	r3, #176	@ 0xb0
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004410:	2302      	movs	r3, #2
 8004412:	e018      	b.n	8004446 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	7c1b      	ldrb	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800441c:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <USBD_CDC_Init+0x1e8>)
 800441e:	7819      	ldrb	r1, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f002 fbb4 	bl	8006b98 <USBD_LL_PrepareReceive>
 8004430:	e008      	b.n	8004444 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004432:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <USBD_CDC_Init+0x1e8>)
 8004434:	7819      	ldrb	r1, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800443c:	2340      	movs	r3, #64	@ 0x40
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f002 fbaa 	bl	8006b98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000093 	.word	0x20000093
 8004454:	20000094 	.word	0x20000094
 8004458:	20000095 	.word	0x20000095

0800445c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004468:	4b3a      	ldr	r3, [pc, #232]	@ (8004554 <USBD_CDC_DeInit+0xf8>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f002 fac9 	bl	8006a06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004474:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <USBD_CDC_DeInit+0xf8>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	3323      	adds	r3, #35	@ 0x23
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800448e:	4b32      	ldr	r3, [pc, #200]	@ (8004558 <USBD_CDC_DeInit+0xfc>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f002 fab6 	bl	8006a06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <USBD_CDC_DeInit+0xfc>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	f003 020f 	and.w	r2, r3, #15
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80044b2:	2200      	movs	r2, #0
 80044b4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80044b6:	4b29      	ldr	r3, [pc, #164]	@ (800455c <USBD_CDC_DeInit+0x100>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f002 faa2 	bl	8006a06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80044c2:	4b26      	ldr	r3, [pc, #152]	@ (800455c <USBD_CDC_DeInit+0x100>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f003 020f 	and.w	r2, r3, #15
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	3323      	adds	r3, #35	@ 0x23
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80044dc:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <USBD_CDC_DeInit+0x100>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f003 020f 	and.w	r2, r3, #15
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	331c      	adds	r3, #28
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	32b0      	adds	r2, #176	@ 0xb0
 8004500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01f      	beq.n	8004548 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	33b0      	adds	r3, #176	@ 0xb0
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	32b0      	adds	r2, #176	@ 0xb0
 8004526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452a:	4618      	mov	r0, r3
 800452c:	f002 fb76 	bl	8006c1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	32b0      	adds	r2, #176	@ 0xb0
 800453a:	2100      	movs	r1, #0
 800453c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000093 	.word	0x20000093
 8004558:	20000094 	.word	0x20000094
 800455c:	20000095 	.word	0x20000095

08004560 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	32b0      	adds	r2, #176	@ 0xb0
 8004574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004578:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800458c:	2303      	movs	r3, #3
 800458e:	e0bf      	b.n	8004710 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004598:	2b00      	cmp	r3, #0
 800459a:	d050      	beq.n	800463e <USBD_CDC_Setup+0xde>
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 80af 	bne.w	8004700 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	88db      	ldrh	r3, [r3, #6]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03a      	beq.n	8004620 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da1b      	bge.n	80045ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	33b0      	adds	r3, #176	@ 0xb0
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80045ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	88d2      	ldrh	r2, [r2, #6]
 80045d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	88db      	ldrh	r3, [r3, #6]
 80045d6:	2b07      	cmp	r3, #7
 80045d8:	bf28      	it	cs
 80045da:	2307      	movcs	r3, #7
 80045dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	89fa      	ldrh	r2, [r7, #14]
 80045e2:	4619      	mov	r1, r3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f001 fda9 	bl	800613c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80045ea:	e090      	b.n	800470e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	785a      	ldrb	r2, [r3, #1]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	88db      	ldrh	r3, [r3, #6]
 80045fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80045fc:	d803      	bhi.n	8004606 <USBD_CDC_Setup+0xa6>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	88db      	ldrh	r3, [r3, #6]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	e000      	b.n	8004608 <USBD_CDC_Setup+0xa8>
 8004606:	2240      	movs	r2, #64	@ 0x40
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004616:	461a      	mov	r2, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f001 fdbe 	bl	800619a <USBD_CtlPrepareRx>
      break;
 800461e:	e076      	b.n	800470e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	33b0      	adds	r3, #176	@ 0xb0
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	7850      	ldrb	r0, [r2, #1]
 8004636:	2200      	movs	r2, #0
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	4798      	blx	r3
      break;
 800463c:	e067      	b.n	800470e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	2b0b      	cmp	r3, #11
 8004644:	d851      	bhi.n	80046ea <USBD_CDC_Setup+0x18a>
 8004646:	a201      	add	r2, pc, #4	@ (adr r2, 800464c <USBD_CDC_Setup+0xec>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	0800467d 	.word	0x0800467d
 8004650:	080046f9 	.word	0x080046f9
 8004654:	080046eb 	.word	0x080046eb
 8004658:	080046eb 	.word	0x080046eb
 800465c:	080046eb 	.word	0x080046eb
 8004660:	080046eb 	.word	0x080046eb
 8004664:	080046eb 	.word	0x080046eb
 8004668:	080046eb 	.word	0x080046eb
 800466c:	080046eb 	.word	0x080046eb
 8004670:	080046eb 	.word	0x080046eb
 8004674:	080046a7 	.word	0x080046a7
 8004678:	080046d1 	.word	0x080046d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b03      	cmp	r3, #3
 8004686:	d107      	bne.n	8004698 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004688:	f107 030a 	add.w	r3, r7, #10
 800468c:	2202      	movs	r2, #2
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 fd53 	bl	800613c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004696:	e032      	b.n	80046fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004698:	6839      	ldr	r1, [r7, #0]
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fcd1 	bl	8006042 <USBD_CtlError>
            ret = USBD_FAIL;
 80046a0:	2303      	movs	r3, #3
 80046a2:	75fb      	strb	r3, [r7, #23]
          break;
 80046a4:	e02b      	b.n	80046fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d107      	bne.n	80046c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80046b2:	f107 030d 	add.w	r3, r7, #13
 80046b6:	2201      	movs	r2, #1
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f001 fd3e 	bl	800613c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046c0:	e01d      	b.n	80046fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f001 fcbc 	bl	8006042 <USBD_CtlError>
            ret = USBD_FAIL;
 80046ca:	2303      	movs	r3, #3
 80046cc:	75fb      	strb	r3, [r7, #23]
          break;
 80046ce:	e016      	b.n	80046fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d00f      	beq.n	80046fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80046dc:	6839      	ldr	r1, [r7, #0]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f001 fcaf 	bl	8006042 <USBD_CtlError>
            ret = USBD_FAIL;
 80046e4:	2303      	movs	r3, #3
 80046e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80046e8:	e008      	b.n	80046fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 fca8 	bl	8006042 <USBD_CtlError>
          ret = USBD_FAIL;
 80046f2:	2303      	movs	r3, #3
 80046f4:	75fb      	strb	r3, [r7, #23]
          break;
 80046f6:	e002      	b.n	80046fe <USBD_CDC_Setup+0x19e>
          break;
 80046f8:	bf00      	nop
 80046fa:	e008      	b.n	800470e <USBD_CDC_Setup+0x1ae>
          break;
 80046fc:	bf00      	nop
      }
      break;
 80046fe:	e006      	b.n	800470e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fc9d 	bl	8006042 <USBD_CtlError>
      ret = USBD_FAIL;
 8004708:	2303      	movs	r3, #3
 800470a:	75fb      	strb	r3, [r7, #23]
      break;
 800470c:	bf00      	nop
  }

  return (uint8_t)ret;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800472a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	32b0      	adds	r2, #176	@ 0xb0
 8004736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800473e:	2303      	movs	r3, #3
 8004740:	e065      	b.n	800480e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	32b0      	adds	r2, #176	@ 0xb0
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	f003 020f 	and.w	r2, r3, #15
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	3314      	adds	r3, #20
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02f      	beq.n	80047cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3314      	adds	r3, #20
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 010f 	and.w	r1, r3, #15
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	460b      	mov	r3, r1
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	440b      	add	r3, r1
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4403      	add	r3, r0
 8004794:	331c      	adds	r3, #28
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	fbb2 f1f3 	udiv	r1, r2, r3
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d112      	bne.n	80047cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 020f 	and.w	r2, r3, #15
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3314      	adds	r3, #20
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80047be:	78f9      	ldrb	r1, [r7, #3]
 80047c0:	2300      	movs	r3, #0
 80047c2:	2200      	movs	r2, #0
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f002 f9c6 	bl	8006b56 <USBD_LL_Transmit>
 80047ca:	e01f      	b.n	800480c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	33b0      	adds	r3, #176	@ 0xb0
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d010      	beq.n	800480c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	33b0      	adds	r3, #176	@ 0xb0
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	32b0      	adds	r2, #176	@ 0xb0
 800482c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004830:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	32b0      	adds	r2, #176	@ 0xb0
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004844:	2303      	movs	r3, #3
 8004846:	e01a      	b.n	800487e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f002 f9c4 	bl	8006bda <USBD_LL_GetRxDataSize>
 8004852:	4602      	mov	r2, r0
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	33b0      	adds	r3, #176	@ 0xb0
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004878:	4611      	mov	r1, r2
 800487a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	32b0      	adds	r2, #176	@ 0xb0
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e024      	b.n	80048f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	33b0      	adds	r3, #176	@ 0xb0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d019      	beq.n	80048f0 <USBD_CDC_EP0_RxReady+0x6a>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80048c2:	2bff      	cmp	r3, #255	@ 0xff
 80048c4:	d014      	beq.n	80048f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	33b0      	adds	r3, #176	@ 0xb0
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80048de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80048e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22ff      	movs	r2, #255	@ 0xff
 80048ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004904:	2182      	movs	r1, #130	@ 0x82
 8004906:	4818      	ldr	r0, [pc, #96]	@ (8004968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004908:	f000 fd62 	bl	80053d0 <USBD_GetEpDesc>
 800490c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800490e:	2101      	movs	r1, #1
 8004910:	4815      	ldr	r0, [pc, #84]	@ (8004968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004912:	f000 fd5d 	bl	80053d0 <USBD_GetEpDesc>
 8004916:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004918:	2181      	movs	r1, #129	@ 0x81
 800491a:	4813      	ldr	r0, [pc, #76]	@ (8004968 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800491c:	f000 fd58 	bl	80053d0 <USBD_GetEpDesc>
 8004920:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2210      	movs	r2, #16
 800492c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d006      	beq.n	8004942 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2200      	movs	r2, #0
 8004938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800493c:	711a      	strb	r2, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004950:	711a      	strb	r2, [r3, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2243      	movs	r2, #67	@ 0x43
 800495a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800495c:	4b02      	ldr	r3, [pc, #8]	@ (8004968 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000050 	.word	0x20000050

0800496c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004974:	2182      	movs	r1, #130	@ 0x82
 8004976:	4818      	ldr	r0, [pc, #96]	@ (80049d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004978:	f000 fd2a 	bl	80053d0 <USBD_GetEpDesc>
 800497c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800497e:	2101      	movs	r1, #1
 8004980:	4815      	ldr	r0, [pc, #84]	@ (80049d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004982:	f000 fd25 	bl	80053d0 <USBD_GetEpDesc>
 8004986:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004988:	2181      	movs	r1, #129	@ 0x81
 800498a:	4813      	ldr	r0, [pc, #76]	@ (80049d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800498c:	f000 fd20 	bl	80053d0 <USBD_GetEpDesc>
 8004990:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2210      	movs	r2, #16
 800499c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2200      	movs	r2, #0
 80049a8:	711a      	strb	r2, [r3, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f042 0202 	orr.w	r2, r2, #2
 80049b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d006      	beq.n	80049c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	711a      	strb	r2, [r3, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f042 0202 	orr.w	r2, r2, #2
 80049c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2243      	movs	r2, #67	@ 0x43
 80049ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80049cc:	4b02      	ldr	r3, [pc, #8]	@ (80049d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000050 	.word	0x20000050

080049dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049e4:	2182      	movs	r1, #130	@ 0x82
 80049e6:	4818      	ldr	r0, [pc, #96]	@ (8004a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049e8:	f000 fcf2 	bl	80053d0 <USBD_GetEpDesc>
 80049ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049ee:	2101      	movs	r1, #1
 80049f0:	4815      	ldr	r0, [pc, #84]	@ (8004a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049f2:	f000 fced 	bl	80053d0 <USBD_GetEpDesc>
 80049f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049f8:	2181      	movs	r1, #129	@ 0x81
 80049fa:	4813      	ldr	r0, [pc, #76]	@ (8004a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049fc:	f000 fce8 	bl	80053d0 <USBD_GetEpDesc>
 8004a00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d006      	beq.n	8004a22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a1c:	711a      	strb	r2, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a30:	711a      	strb	r2, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2243      	movs	r2, #67	@ 0x43
 8004a3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a3c:	4b02      	ldr	r3, [pc, #8]	@ (8004a48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000050 	.word	0x20000050

08004a4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	220a      	movs	r2, #10
 8004a58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a5a:	4b03      	ldr	r3, [pc, #12]	@ (8004a68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e009      	b.n	8004a94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	33b0      	adds	r3, #176	@ 0xb0
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	32b0      	adds	r2, #176	@ 0xb0
 8004ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e008      	b.n	8004ad8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	32b0      	adds	r2, #176	@ 0xb0
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e004      	b.n	8004b12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	32b0      	adds	r2, #176	@ 0xb0
 8004b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b36:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e025      	b.n	8004b92 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11f      	bne.n	8004b90 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004b58:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <USBD_CDC_TransmitPacket+0x7c>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4403      	add	r3, r0
 8004b72:	3314      	adds	r3, #20
 8004b74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004b76:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <USBD_CDC_TransmitPacket+0x7c>)
 8004b78:	7819      	ldrb	r1, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 ffe5 	bl	8006b56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000093 	.word	0x20000093

08004ba0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	32b0      	adds	r2, #176	@ 0xb0
 8004bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	32b0      	adds	r2, #176	@ 0xb0
 8004bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e018      	b.n	8004c00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	7c1b      	ldrb	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <USBD_CDC_ReceivePacket+0x68>)
 8004bd8:	7819      	ldrb	r1, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004be0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 ffd7 	bl	8006b98 <USBD_LL_PrepareReceive>
 8004bea:	e008      	b.n	8004bfe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <USBD_CDC_ReceivePacket+0x68>)
 8004bee:	7819      	ldrb	r1, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004bf6:	2340      	movs	r3, #64	@ 0x40
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f001 ffcd 	bl	8006b98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20000094 	.word	0x20000094

08004c0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e01f      	b.n	8004c64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	79fa      	ldrb	r2, [r7, #7]
 8004c56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f001 fe47 	bl	80068ec <USBD_LL_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e025      	b.n	8004cd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	32ae      	adds	r2, #174	@ 0xae
 8004c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00f      	beq.n	8004cc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	32ae      	adds	r2, #174	@ 0xae
 8004caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	f107 020e 	add.w	r2, r7, #14
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
 8004cb8:	4602      	mov	r2, r0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 fe4f 	bl	8006984 <USBD_LL_Start>
 8004ce6:	4603      	mov	r3, r0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cf8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
 8004d30:	4603      	mov	r3, r0
 8004d32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	4798      	blx	r3
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004d64:	2303      	movs	r3, #3
 8004d66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f922 	bl	8005fce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d01a      	beq.n	8004de4 <USBD_LL_SetupStage+0x72>
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d822      	bhi.n	8004df8 <USBD_LL_SetupStage+0x86>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <USBD_LL_SetupStage+0x4a>
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d00a      	beq.n	8004dd0 <USBD_LL_SetupStage+0x5e>
 8004dba:	e01d      	b.n	8004df8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb77 	bl	80054b8 <USBD_StdDevReq>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004dce:	e020      	b.n	8004e12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fbdf 	bl	800559c <USBD_StdItfReq>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
      break;
 8004de2:	e016      	b.n	8004e12 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fc41 	bl	8005674 <USBD_StdEPReq>
 8004df2:	4603      	mov	r3, r0
 8004df4:	73fb      	strb	r3, [r7, #15]
      break;
 8004df6:	e00c      	b.n	8004e12 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004dfe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	4619      	mov	r1, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 fe1c 	bl	8006a44 <USBD_LL_StallEP>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e10:	bf00      	nop
  }

  return ret;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	460b      	mov	r3, r1
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d177      	bne.n	8004f24 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004e3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	f040 80a1 	bne.w	8004f8a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	8992      	ldrh	r2, [r2, #12]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d91c      	bls.n	8004e8e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	8992      	ldrh	r2, [r2, #12]
 8004e5c:	1a9a      	subs	r2, r3, r2
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	8992      	ldrh	r2, [r2, #12]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	6919      	ldr	r1, [r3, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	899b      	ldrh	r3, [r3, #12]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	bf38      	it	cc
 8004e82:	4613      	movcc	r3, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f001 f9a8 	bl	80061dc <USBD_CtlContinueRx>
 8004e8c:	e07d      	b.n	8004f8a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d014      	beq.n	8004ec6 <USBD_LL_DataOutStage+0xaa>
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d81d      	bhi.n	8004edc <USBD_LL_DataOutStage+0xc0>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <USBD_LL_DataOutStage+0x8e>
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d003      	beq.n	8004eb0 <USBD_LL_DataOutStage+0x94>
 8004ea8:	e018      	b.n	8004edc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75bb      	strb	r3, [r7, #22]
            break;
 8004eae:	e018      	b.n	8004ee2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4619      	mov	r1, r3
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fa6e 	bl	800539c <USBD_CoreFindIF>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	75bb      	strb	r3, [r7, #22]
            break;
 8004ec4:	e00d      	b.n	8004ee2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	4619      	mov	r1, r3
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fa70 	bl	80053b6 <USBD_CoreFindEP>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8004eda:	e002      	b.n	8004ee2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	75bb      	strb	r3, [r7, #22]
            break;
 8004ee0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004ee2:	7dbb      	ldrb	r3, [r7, #22]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d119      	bne.n	8004f1c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d113      	bne.n	8004f1c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004ef4:	7dba      	ldrb	r2, [r7, #22]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	32ae      	adds	r2, #174	@ 0xae
 8004efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8004f04:	7dba      	ldrb	r2, [r7, #22]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004f0c:	7dba      	ldrb	r2, [r7, #22]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	32ae      	adds	r2, #174	@ 0xae
 8004f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f001 f96e 	bl	80061fe <USBD_CtlSendStatus>
 8004f22:	e032      	b.n	8004f8a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fa41 	bl	80053b6 <USBD_CoreFindEP>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004f38:	7dbb      	ldrb	r3, [r7, #22]
 8004f3a:	2bff      	cmp	r3, #255	@ 0xff
 8004f3c:	d025      	beq.n	8004f8a <USBD_LL_DataOutStage+0x16e>
 8004f3e:	7dbb      	ldrb	r3, [r7, #22]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d122      	bne.n	8004f8a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d117      	bne.n	8004f80 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004f50:	7dba      	ldrb	r2, [r7, #22]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	32ae      	adds	r2, #174	@ 0xae
 8004f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8004f60:	7dba      	ldrb	r2, [r7, #22]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004f68:	7dba      	ldrb	r2, [r7, #22]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	32ae      	adds	r2, #174	@ 0xae
 8004f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	7afa      	ldrb	r2, [r7, #11]
 8004f76:	4611      	mov	r1, r2
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	4798      	blx	r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	e000      	b.n	8004f8c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d178      	bne.n	800509a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3314      	adds	r3, #20
 8004fac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d163      	bne.n	8005080 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	8992      	ldrh	r2, [r2, #12]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d91c      	bls.n	8004ffe <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	8992      	ldrh	r2, [r2, #12]
 8004fcc:	1a9a      	subs	r2, r3, r2
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	8992      	ldrh	r2, [r2, #12]
 8004fda:	441a      	add	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6919      	ldr	r1, [r3, #16]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f001 f8c4 	bl	8006178 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f001 fdce 	bl	8006b98 <USBD_LL_PrepareReceive>
 8004ffc:	e040      	b.n	8005080 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	899b      	ldrh	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d11c      	bne.n	8005046 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005014:	4293      	cmp	r3, r2
 8005016:	d316      	bcc.n	8005046 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005022:	429a      	cmp	r2, r3
 8005024:	d20f      	bcs.n	8005046 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005026:	2200      	movs	r2, #0
 8005028:	2100      	movs	r1, #0
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f001 f8a4 	bl	8006178 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005038:	2300      	movs	r3, #0
 800503a:	2200      	movs	r2, #0
 800503c:	2100      	movs	r1, #0
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f001 fdaa 	bl	8006b98 <USBD_LL_PrepareReceive>
 8005044:	e01c      	b.n	8005080 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d10f      	bne.n	8005072 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005072:	2180      	movs	r1, #128	@ 0x80
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f001 fce5 	bl	8006a44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f001 f8d2 	bl	8006224 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d03a      	beq.n	8005100 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fe30 	bl	8004cf0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005098:	e032      	b.n	8005100 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	4619      	mov	r1, r3
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f986 	bl	80053b6 <USBD_CoreFindEP>
 80050aa:	4603      	mov	r3, r0
 80050ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
 80050b0:	2bff      	cmp	r3, #255	@ 0xff
 80050b2:	d025      	beq.n	8005100 <USBD_LL_DataInStage+0x16c>
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d122      	bne.n	8005100 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d11c      	bne.n	8005100 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80050c6:	7dfa      	ldrb	r2, [r7, #23]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	32ae      	adds	r2, #174	@ 0xae
 80050cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d014      	beq.n	8005100 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80050d6:	7dfa      	ldrb	r2, [r7, #23]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80050de:	7dfa      	ldrb	r2, [r7, #23]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	32ae      	adds	r2, #174	@ 0xae
 80050e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	7afa      	ldrb	r2, [r7, #11]
 80050ec:	4611      	mov	r1, r2
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	4798      	blx	r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80050f6:	7dbb      	ldrb	r3, [r7, #22]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80050fc:	7dbb      	ldrb	r3, [r7, #22]
 80050fe:	e000      	b.n	8005102 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d014      	beq.n	8005170 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6852      	ldr	r2, [r2, #4]
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	4611      	mov	r1, r2
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800516c:	2303      	movs	r3, #3
 800516e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005170:	2340      	movs	r3, #64	@ 0x40
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f001 fc1f 	bl	80069ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2240      	movs	r2, #64	@ 0x40
 8005188:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800518c:	2340      	movs	r3, #64	@ 0x40
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	@ 0x80
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f001 fc11 	bl	80069ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2240      	movs	r2, #64	@ 0x40
 80051a4:	841a      	strh	r2, [r3, #32]

  return ret;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d006      	beq.n	80051f2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b04      	cmp	r3, #4
 800521a:	d106      	bne.n	800522a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005222:	b2da      	uxtb	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d110      	bne.n	800526e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	32ae      	adds	r2, #174	@ 0xae
 800528e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005296:	2303      	movs	r3, #3
 8005298:	e01c      	b.n	80052d4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d115      	bne.n	80052d2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	32ae      	adds	r2, #174	@ 0xae
 80052b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	32ae      	adds	r2, #174	@ 0xae
 80052c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	4611      	mov	r1, r2
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	32ae      	adds	r2, #174	@ 0xae
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e01c      	b.n	8005338 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b03      	cmp	r3, #3
 8005308:	d115      	bne.n	8005336 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	32ae      	adds	r2, #174	@ 0xae
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	32ae      	adds	r2, #174	@ 0xae
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	4611      	mov	r1, r2
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6852      	ldr	r2, [r2, #4]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	4611      	mov	r1, r2
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800538e:	2303      	movs	r3, #3
 8005390:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005392:	7bfb      	ldrb	r3, [r7, #15]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80053c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	885b      	ldrh	r3, [r3, #2]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d91f      	bls.n	8005436 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80053fc:	e013      	b.n	8005426 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80053fe:	f107 030a 	add.w	r3, r7, #10
 8005402:	4619      	mov	r1, r3
 8005404:	6978      	ldr	r0, [r7, #20]
 8005406:	f000 f81b 	bl	8005440 <USBD_GetNextDesc>
 800540a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b05      	cmp	r3, #5
 8005412:	d108      	bne.n	8005426 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	789b      	ldrb	r3, [r3, #2]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	429a      	cmp	r2, r3
 8005420:	d008      	beq.n	8005434 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	885b      	ldrh	r3, [r3, #2]
 800542a:	b29a      	uxth	r2, r3
 800542c:	897b      	ldrh	r3, [r7, #10]
 800542e:	429a      	cmp	r2, r3
 8005430:	d8e5      	bhi.n	80053fe <USBD_GetEpDesc+0x2e>
 8005432:	e000      	b.n	8005436 <USBD_GetEpDesc+0x66>
          break;
 8005434:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005436:	693b      	ldr	r3, [r7, #16]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	7812      	ldrb	r2, [r2, #0]
 8005456:	4413      	add	r3, r2
 8005458:	b29a      	uxth	r2, r3
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4413      	add	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800546a:	68fb      	ldr	r3, [r7, #12]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005496:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	b21a      	sxth	r2, r3
 800549e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b21b      	sxth	r3, r3
 80054a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80054a8:	89fb      	ldrh	r3, [r7, #14]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054ce:	2b40      	cmp	r3, #64	@ 0x40
 80054d0:	d005      	beq.n	80054de <USBD_StdDevReq+0x26>
 80054d2:	2b40      	cmp	r3, #64	@ 0x40
 80054d4:	d857      	bhi.n	8005586 <USBD_StdDevReq+0xce>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00f      	beq.n	80054fa <USBD_StdDevReq+0x42>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d153      	bne.n	8005586 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	32ae      	adds	r2, #174	@ 0xae
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
      break;
 80054f8:	e04a      	b.n	8005590 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b09      	cmp	r3, #9
 8005500:	d83b      	bhi.n	800557a <USBD_StdDevReq+0xc2>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <USBD_StdDevReq+0x50>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	0800555d 	.word	0x0800555d
 800550c:	08005571 	.word	0x08005571
 8005510:	0800557b 	.word	0x0800557b
 8005514:	08005567 	.word	0x08005567
 8005518:	0800557b 	.word	0x0800557b
 800551c:	0800553b 	.word	0x0800553b
 8005520:	08005531 	.word	0x08005531
 8005524:	0800557b 	.word	0x0800557b
 8005528:	08005553 	.word	0x08005553
 800552c:	08005545 	.word	0x08005545
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa3e 	bl	80059b4 <USBD_GetDescriptor>
          break;
 8005538:	e024      	b.n	8005584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fba3 	bl	8005c88 <USBD_SetAddress>
          break;
 8005542:	e01f      	b.n	8005584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fbe2 	bl	8005d10 <USBD_SetConfig>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
          break;
 8005550:	e018      	b.n	8005584 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fc85 	bl	8005e64 <USBD_GetConfig>
          break;
 800555a:	e013      	b.n	8005584 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fcb6 	bl	8005ed0 <USBD_GetStatus>
          break;
 8005564:	e00e      	b.n	8005584 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fce5 	bl	8005f38 <USBD_SetFeature>
          break;
 800556e:	e009      	b.n	8005584 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fd09 	bl	8005f8a <USBD_ClrFeature>
          break;
 8005578:	e004      	b.n	8005584 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fd60 	bl	8006042 <USBD_CtlError>
          break;
 8005582:	bf00      	nop
      }
      break;
 8005584:	e004      	b.n	8005590 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fd5a 	bl	8006042 <USBD_CtlError>
      break;
 800558e:	bf00      	nop
  }

  return ret;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop

0800559c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055b2:	2b40      	cmp	r3, #64	@ 0x40
 80055b4:	d005      	beq.n	80055c2 <USBD_StdItfReq+0x26>
 80055b6:	2b40      	cmp	r3, #64	@ 0x40
 80055b8:	d852      	bhi.n	8005660 <USBD_StdItfReq+0xc4>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <USBD_StdItfReq+0x26>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d14e      	bne.n	8005660 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d840      	bhi.n	8005652 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	889b      	ldrh	r3, [r3, #4]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d836      	bhi.n	8005648 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	889b      	ldrh	r3, [r3, #4]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff feda 	bl	800539c <USBD_CoreFindIF>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	2bff      	cmp	r3, #255	@ 0xff
 80055f0:	d01d      	beq.n	800562e <USBD_StdItfReq+0x92>
 80055f2:	7bbb      	ldrb	r3, [r7, #14]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11a      	bne.n	800562e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80055f8:	7bba      	ldrb	r2, [r7, #14]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	32ae      	adds	r2, #174	@ 0xae
 80055fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00f      	beq.n	8005628 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005608:	7bba      	ldrb	r2, [r7, #14]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005610:	7bba      	ldrb	r2, [r7, #14]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	32ae      	adds	r2, #174	@ 0xae
 8005616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
 8005622:	4603      	mov	r3, r0
 8005624:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005626:	e004      	b.n	8005632 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800562c:	e001      	b.n	8005632 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800562e:	2303      	movs	r3, #3
 8005630:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	88db      	ldrh	r3, [r3, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d110      	bne.n	800565c <USBD_StdItfReq+0xc0>
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10d      	bne.n	800565c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fddc 	bl	80061fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005646:	e009      	b.n	800565c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fcf9 	bl	8006042 <USBD_CtlError>
          break;
 8005650:	e004      	b.n	800565c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fcf4 	bl	8006042 <USBD_CtlError>
          break;
 800565a:	e000      	b.n	800565e <USBD_StdItfReq+0xc2>
          break;
 800565c:	bf00      	nop
      }
      break;
 800565e:	e004      	b.n	800566a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fced 	bl	8006042 <USBD_CtlError>
      break;
 8005668:	bf00      	nop
  }

  return ret;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	889b      	ldrh	r3, [r3, #4]
 8005686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005690:	2b40      	cmp	r3, #64	@ 0x40
 8005692:	d007      	beq.n	80056a4 <USBD_StdEPReq+0x30>
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	f200 8181 	bhi.w	800599c <USBD_StdEPReq+0x328>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d02a      	beq.n	80056f4 <USBD_StdEPReq+0x80>
 800569e:	2b20      	cmp	r3, #32
 80056a0:	f040 817c 	bne.w	800599c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	4619      	mov	r1, r3
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fe84 	bl	80053b6 <USBD_CoreFindEP>
 80056ae:	4603      	mov	r3, r0
 80056b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056b2:	7b7b      	ldrb	r3, [r7, #13]
 80056b4:	2bff      	cmp	r3, #255	@ 0xff
 80056b6:	f000 8176 	beq.w	80059a6 <USBD_StdEPReq+0x332>
 80056ba:	7b7b      	ldrb	r3, [r7, #13]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8172 	bne.w	80059a6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80056c2:	7b7a      	ldrb	r2, [r7, #13]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80056ca:	7b7a      	ldrb	r2, [r7, #13]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	32ae      	adds	r2, #174	@ 0xae
 80056d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8165 	beq.w	80059a6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80056dc:	7b7a      	ldrb	r2, [r7, #13]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	32ae      	adds	r2, #174	@ 0xae
 80056e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056f2:	e158      	b.n	80059a6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d008      	beq.n	800570e <USBD_StdEPReq+0x9a>
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	f300 8147 	bgt.w	8005990 <USBD_StdEPReq+0x31c>
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 809b 	beq.w	800583e <USBD_StdEPReq+0x1ca>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d03c      	beq.n	8005786 <USBD_StdEPReq+0x112>
 800570c:	e140      	b.n	8005990 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d002      	beq.n	8005720 <USBD_StdEPReq+0xac>
 800571a:	2b03      	cmp	r3, #3
 800571c:	d016      	beq.n	800574c <USBD_StdEPReq+0xd8>
 800571e:	e02c      	b.n	800577a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <USBD_StdEPReq+0xce>
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	2b80      	cmp	r3, #128	@ 0x80
 800572a:	d00a      	beq.n	8005742 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 f987 	bl	8006a44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005736:	2180      	movs	r1, #128	@ 0x80
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 f983 	bl	8006a44 <USBD_LL_StallEP>
 800573e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005740:	e020      	b.n	8005784 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fc7c 	bl	8006042 <USBD_CtlError>
              break;
 800574a:	e01b      	b.n	8005784 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	885b      	ldrh	r3, [r3, #2]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10e      	bne.n	8005772 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <USBD_StdEPReq+0xfe>
 800575a:	7bbb      	ldrb	r3, [r7, #14]
 800575c:	2b80      	cmp	r3, #128	@ 0x80
 800575e:	d008      	beq.n	8005772 <USBD_StdEPReq+0xfe>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	88db      	ldrh	r3, [r3, #6]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 f969 	bl	8006a44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fd43 	bl	80061fe <USBD_CtlSendStatus>

              break;
 8005778:	e004      	b.n	8005784 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fc60 	bl	8006042 <USBD_CtlError>
              break;
 8005782:	bf00      	nop
          }
          break;
 8005784:	e109      	b.n	800599a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d002      	beq.n	8005798 <USBD_StdEPReq+0x124>
 8005792:	2b03      	cmp	r3, #3
 8005794:	d016      	beq.n	80057c4 <USBD_StdEPReq+0x150>
 8005796:	e04b      	b.n	8005830 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005798:	7bbb      	ldrb	r3, [r7, #14]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <USBD_StdEPReq+0x146>
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b80      	cmp	r3, #128	@ 0x80
 80057a2:	d00a      	beq.n	80057ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f94b 	bl	8006a44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80057ae:	2180      	movs	r1, #128	@ 0x80
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 f947 	bl	8006a44 <USBD_LL_StallEP>
 80057b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057b8:	e040      	b.n	800583c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fc40 	bl	8006042 <USBD_CtlError>
              break;
 80057c2:	e03b      	b.n	800583c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	885b      	ldrh	r3, [r3, #2]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d136      	bne.n	800583a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80057d6:	7bbb      	ldrb	r3, [r7, #14]
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f001 f951 	bl	8006a82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fd0c 	bl	80061fe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fde3 	bl	80053b6 <USBD_CoreFindEP>
 80057f0:	4603      	mov	r3, r0
 80057f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057f4:	7b7b      	ldrb	r3, [r7, #13]
 80057f6:	2bff      	cmp	r3, #255	@ 0xff
 80057f8:	d01f      	beq.n	800583a <USBD_StdEPReq+0x1c6>
 80057fa:	7b7b      	ldrb	r3, [r7, #13]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11c      	bne.n	800583a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005800:	7b7a      	ldrb	r2, [r7, #13]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005808:	7b7a      	ldrb	r2, [r7, #13]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	32ae      	adds	r2, #174	@ 0xae
 800580e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d010      	beq.n	800583a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005818:	7b7a      	ldrb	r2, [r7, #13]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	32ae      	adds	r2, #174	@ 0xae
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
 800582a:	4603      	mov	r3, r0
 800582c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800582e:	e004      	b.n	800583a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fc05 	bl	8006042 <USBD_CtlError>
              break;
 8005838:	e000      	b.n	800583c <USBD_StdEPReq+0x1c8>
              break;
 800583a:	bf00      	nop
          }
          break;
 800583c:	e0ad      	b.n	800599a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d002      	beq.n	8005850 <USBD_StdEPReq+0x1dc>
 800584a:	2b03      	cmp	r3, #3
 800584c:	d033      	beq.n	80058b6 <USBD_StdEPReq+0x242>
 800584e:	e099      	b.n	8005984 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <USBD_StdEPReq+0x1f2>
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	2b80      	cmp	r3, #128	@ 0x80
 800585a:	d004      	beq.n	8005866 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fbef 	bl	8006042 <USBD_CtlError>
                break;
 8005864:	e093      	b.n	800598e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800586a:	2b00      	cmp	r3, #0
 800586c:	da0b      	bge.n	8005886 <USBD_StdEPReq+0x212>
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	3310      	adds	r3, #16
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4413      	add	r3, r2
 8005882:	3304      	adds	r3, #4
 8005884:	e00b      	b.n	800589e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	3304      	adds	r3, #4
 800589e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	330e      	adds	r3, #14
 80058aa:	2202      	movs	r2, #2
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fc44 	bl	800613c <USBD_CtlSendData>
              break;
 80058b4:	e06b      	b.n	800598e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da11      	bge.n	80058e2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	f003 020f 	and.w	r2, r3, #15
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3323      	adds	r3, #35	@ 0x23
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d117      	bne.n	8005908 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fbb1 	bl	8006042 <USBD_CtlError>
                  break;
 80058e0:	e055      	b.n	800598e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb9e 	bl	8006042 <USBD_CtlError>
                  break;
 8005906:	e042      	b.n	800598e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800590c:	2b00      	cmp	r3, #0
 800590e:	da0b      	bge.n	8005928 <USBD_StdEPReq+0x2b4>
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	3310      	adds	r3, #16
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	3304      	adds	r3, #4
 8005926:	e00b      	b.n	8005940 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	3304      	adds	r3, #4
 8005940:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <USBD_StdEPReq+0x2da>
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	2b80      	cmp	r3, #128	@ 0x80
 800594c:	d103      	bne.n	8005956 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2200      	movs	r2, #0
 8005952:	739a      	strb	r2, [r3, #14]
 8005954:	e00e      	b.n	8005974 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 f8b0 	bl	8006ac0 <USBD_LL_IsStallEP>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2201      	movs	r2, #1
 800596a:	739a      	strb	r2, [r3, #14]
 800596c:	e002      	b.n	8005974 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	330e      	adds	r3, #14
 8005978:	2202      	movs	r2, #2
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fbdd 	bl	800613c <USBD_CtlSendData>
              break;
 8005982:	e004      	b.n	800598e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fb5b 	bl	8006042 <USBD_CtlError>
              break;
 800598c:	bf00      	nop
          }
          break;
 800598e:	e004      	b.n	800599a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fb55 	bl	8006042 <USBD_CtlError>
          break;
 8005998:	bf00      	nop
      }
      break;
 800599a:	e005      	b.n	80059a8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fb4f 	bl	8006042 <USBD_CtlError>
      break;
 80059a4:	e000      	b.n	80059a8 <USBD_StdEPReq+0x334>
      break;
 80059a6:	bf00      	nop
  }

  return ret;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	885b      	ldrh	r3, [r3, #2]
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	2b06      	cmp	r3, #6
 80059d6:	f200 8128 	bhi.w	8005c2a <USBD_GetDescriptor+0x276>
 80059da:	a201      	add	r2, pc, #4	@ (adr r2, 80059e0 <USBD_GetDescriptor+0x2c>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059fd 	.word	0x080059fd
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a55 	.word	0x08005a55
 80059ec:	08005c2b 	.word	0x08005c2b
 80059f0:	08005c2b 	.word	0x08005c2b
 80059f4:	08005bcb 	.word	0x08005bcb
 80059f8:	08005bf7 	.word	0x08005bf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	7c12      	ldrb	r2, [r2, #16]
 8005a08:	f107 0108 	add.w	r1, r7, #8
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	60f8      	str	r0, [r7, #12]
      break;
 8005a12:	e112      	b.n	8005c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	7c1b      	ldrb	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10d      	bne.n	8005a38 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	f107 0208 	add.w	r2, r7, #8
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
 8005a2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3301      	adds	r3, #1
 8005a32:	2202      	movs	r2, #2
 8005a34:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a36:	e100      	b.n	8005c3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	f107 0208 	add.w	r2, r7, #8
 8005a44:	4610      	mov	r0, r2
 8005a46:	4798      	blx	r3
 8005a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	2202      	movs	r2, #2
 8005a50:	701a      	strb	r2, [r3, #0]
      break;
 8005a52:	e0f2      	b.n	8005c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	885b      	ldrh	r3, [r3, #2]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	f200 80ac 	bhi.w	8005bb8 <USBD_GetDescriptor+0x204>
 8005a60:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <USBD_GetDescriptor+0xb4>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005ab5 	.word	0x08005ab5
 8005a70:	08005ae9 	.word	0x08005ae9
 8005a74:	08005b1d 	.word	0x08005b1d
 8005a78:	08005b51 	.word	0x08005b51
 8005a7c:	08005b85 	.word	0x08005b85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	7c12      	ldrb	r2, [r2, #16]
 8005a98:	f107 0108 	add.w	r1, r7, #8
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
 8005aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aa2:	e091      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aa4:	6839      	ldr	r1, [r7, #0]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 facb 	bl	8006042 <USBD_CtlError>
            err++;
 8005aac:	7afb      	ldrb	r3, [r7, #11]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ab2:	e089      	b.n	8005bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	7c12      	ldrb	r2, [r2, #16]
 8005acc:	f107 0108 	add.w	r1, r7, #8
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4798      	blx	r3
 8005ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ad6:	e077      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fab1 	bl	8006042 <USBD_CtlError>
            err++;
 8005ae0:	7afb      	ldrb	r3, [r7, #11]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ae6:	e06f      	b.n	8005bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	7c12      	ldrb	r2, [r2, #16]
 8005b00:	f107 0108 	add.w	r1, r7, #8
 8005b04:	4610      	mov	r0, r2
 8005b06:	4798      	blx	r3
 8005b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b0a:	e05d      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa97 	bl	8006042 <USBD_CtlError>
            err++;
 8005b14:	7afb      	ldrb	r3, [r7, #11]
 8005b16:	3301      	adds	r3, #1
 8005b18:	72fb      	strb	r3, [r7, #11]
          break;
 8005b1a:	e055      	b.n	8005bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	7c12      	ldrb	r2, [r2, #16]
 8005b34:	f107 0108 	add.w	r1, r7, #8
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4798      	blx	r3
 8005b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b3e:	e043      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa7d 	bl	8006042 <USBD_CtlError>
            err++;
 8005b48:	7afb      	ldrb	r3, [r7, #11]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b4e:	e03b      	b.n	8005bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	7c12      	ldrb	r2, [r2, #16]
 8005b68:	f107 0108 	add.w	r1, r7, #8
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
 8005b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b72:	e029      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa63 	bl	8006042 <USBD_CtlError>
            err++;
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	72fb      	strb	r3, [r7, #11]
          break;
 8005b82:	e021      	b.n	8005bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	7c12      	ldrb	r2, [r2, #16]
 8005b9c:	f107 0108 	add.w	r1, r7, #8
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4798      	blx	r3
 8005ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ba6:	e00f      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa49 	bl	8006042 <USBD_CtlError>
            err++;
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bb6:	e007      	b.n	8005bc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa41 	bl	8006042 <USBD_CtlError>
          err++;
 8005bc0:	7afb      	ldrb	r3, [r7, #11]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005bc6:	bf00      	nop
      }
      break;
 8005bc8:	e037      	b.n	8005c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	7c1b      	ldrb	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	f107 0208 	add.w	r2, r7, #8
 8005bde:	4610      	mov	r0, r2
 8005be0:	4798      	blx	r3
 8005be2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005be4:	e029      	b.n	8005c3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa2a 	bl	8006042 <USBD_CtlError>
        err++;
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8005bf4:	e021      	b.n	8005c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	7c1b      	ldrb	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10d      	bne.n	8005c1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	f107 0208 	add.w	r2, r7, #8
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4798      	blx	r3
 8005c0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	2207      	movs	r2, #7
 8005c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c18:	e00f      	b.n	8005c3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa10 	bl	8006042 <USBD_CtlError>
        err++;
 8005c22:	7afb      	ldrb	r3, [r7, #11]
 8005c24:	3301      	adds	r3, #1
 8005c26:	72fb      	strb	r3, [r7, #11]
      break;
 8005c28:	e007      	b.n	8005c3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fa08 	bl	8006042 <USBD_CtlError>
      err++;
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	3301      	adds	r3, #1
 8005c36:	72fb      	strb	r3, [r7, #11]
      break;
 8005c38:	bf00      	nop
  }

  if (err != 0U)
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11e      	bne.n	8005c7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	88db      	ldrh	r3, [r3, #6]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d016      	beq.n	8005c76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005c48:	893b      	ldrh	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	88da      	ldrh	r2, [r3, #6]
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	4293      	cmp	r3, r2
 8005c56:	bf28      	it	cs
 8005c58:	4613      	movcs	r3, r2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c5e:	893b      	ldrh	r3, [r7, #8]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa69 	bl	800613c <USBD_CtlSendData>
 8005c6a:	e009      	b.n	8005c80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9e7 	bl	8006042 <USBD_CtlError>
 8005c74:	e004      	b.n	8005c80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fac1 	bl	80061fe <USBD_CtlSendStatus>
 8005c7c:	e000      	b.n	8005c80 <USBD_GetDescriptor+0x2cc>
    return;
 8005c7e:	bf00      	nop
  }
}
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop

08005c88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	889b      	ldrh	r3, [r3, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d131      	bne.n	8005cfe <USBD_SetAddress+0x76>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	88db      	ldrh	r3, [r3, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d12d      	bne.n	8005cfe <USBD_SetAddress+0x76>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	885b      	ldrh	r3, [r3, #2]
 8005ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca8:	d829      	bhi.n	8005cfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	885b      	ldrh	r3, [r3, #2]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d104      	bne.n	8005ccc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f9bc 	bl	8006042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cca:	e01d      	b.n	8005d08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7bfa      	ldrb	r2, [r7, #15]
 8005cd0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 ff1d 	bl	8006b18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa8d 	bl	80061fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf2:	e009      	b.n	8005d08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfc:	e004      	b.n	8005d08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f99e 	bl	8006042 <USBD_CtlError>
  }
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	4b4e      	ldr	r3, [pc, #312]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005d26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d28:	4b4d      	ldr	r3, [pc, #308]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d905      	bls.n	8005d3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f985 	bl	8006042 <USBD_CtlError>
    return USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e08c      	b.n	8005e56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d002      	beq.n	8005d4e <USBD_SetConfig+0x3e>
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d029      	beq.n	8005da0 <USBD_SetConfig+0x90>
 8005d4c:	e075      	b.n	8005e3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005d4e:	4b44      	ldr	r3, [pc, #272]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d020      	beq.n	8005d98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005d56:	4b42      	ldr	r3, [pc, #264]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d60:	4b3f      	ldr	r3, [pc, #252]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fe ffcd 	bl	8004d06 <USBD_SetClassConfig>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f962 	bl	8006042 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d86:	e065      	b.n	8005e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa38 	bl	80061fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2203      	movs	r2, #3
 8005d92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005d96:	e05d      	b.n	8005e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa30 	bl	80061fe <USBD_CtlSendStatus>
      break;
 8005d9e:	e059      	b.n	8005e54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005da0:	4b2f      	ldr	r3, [pc, #188]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d112      	bne.n	8005dce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005db0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dba:	4b29      	ldr	r3, [pc, #164]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fe ffbc 	bl	8004d3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa19 	bl	80061fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005dcc:	e042      	b.n	8005e54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005dce:	4b24      	ldr	r3, [pc, #144]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d02a      	beq.n	8005e32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fe ffaa 	bl	8004d3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005dea:	4b1d      	ldr	r3, [pc, #116]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005df4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe ff83 	bl	8004d06 <USBD_SetClassConfig>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00f      	beq.n	8005e2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f918 	bl	8006042 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fe ff8f 	bl	8004d3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005e28:	e014      	b.n	8005e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9e7 	bl	80061fe <USBD_CtlSendStatus>
      break;
 8005e30:	e010      	b.n	8005e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9e3 	bl	80061fe <USBD_CtlSendStatus>
      break;
 8005e38:	e00c      	b.n	8005e54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f900 	bl	8006042 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e42:	4b07      	ldr	r3, [pc, #28]	@ (8005e60 <USBD_SetConfig+0x150>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fe ff78 	bl	8004d3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	73fb      	strb	r3, [r7, #15]
      break;
 8005e52:	bf00      	nop
  }

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2000011c 	.word	0x2000011c

08005e64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d004      	beq.n	8005e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8e2 	bl	8006042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e7e:	e023      	b.n	8005ec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	dc02      	bgt.n	8005e92 <USBD_GetConfig+0x2e>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dc03      	bgt.n	8005e98 <USBD_GetConfig+0x34>
 8005e90:	e015      	b.n	8005ebe <USBD_GetConfig+0x5a>
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d00b      	beq.n	8005eae <USBD_GetConfig+0x4a>
 8005e96:	e012      	b.n	8005ebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f948 	bl	800613c <USBD_CtlSendData>
        break;
 8005eac:	e00c      	b.n	8005ec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f940 	bl	800613c <USBD_CtlSendData>
        break;
 8005ebc:	e004      	b.n	8005ec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8be 	bl	8006042 <USBD_CtlError>
        break;
 8005ec6:	bf00      	nop
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d81e      	bhi.n	8005f26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	88db      	ldrh	r3, [r3, #6]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d004      	beq.n	8005efa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8a5 	bl	8006042 <USBD_CtlError>
        break;
 8005ef8:	e01a      	b.n	8005f30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f043 0202 	orr.w	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f90c 	bl	800613c <USBD_CtlSendData>
      break;
 8005f24:	e004      	b.n	8005f30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f88a 	bl	8006042 <USBD_CtlError>
      break;
 8005f2e:	bf00      	nop
  }
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	885b      	ldrh	r3, [r3, #2]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d107      	bne.n	8005f5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f953 	bl	80061fe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005f58:	e013      	b.n	8005f82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	885b      	ldrh	r3, [r3, #2]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d10b      	bne.n	8005f7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	889b      	ldrh	r3, [r3, #4]
 8005f66:	0a1b      	lsrs	r3, r3, #8
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f943 	bl	80061fe <USBD_CtlSendStatus>
}
 8005f78:	e003      	b.n	8005f82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f860 	bl	8006042 <USBD_CtlError>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d80b      	bhi.n	8005fba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	885b      	ldrh	r3, [r3, #2]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10c      	bne.n	8005fc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f923 	bl	80061fe <USBD_CtlSendStatus>
      }
      break;
 8005fb8:	e004      	b.n	8005fc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f840 	bl	8006042 <USBD_CtlError>
      break;
 8005fc2:	e000      	b.n	8005fc6 <USBD_ClrFeature+0x3c>
      break;
 8005fc4:	bf00      	nop
  }
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7ff fa3d 	bl	8005478 <SWAPBYTE>
 8005ffe:	4603      	mov	r3, r0
 8006000:	461a      	mov	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3301      	adds	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fa30 	bl	8005478 <SWAPBYTE>
 8006018:	4603      	mov	r3, r0
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fa23 	bl	8005478 <SWAPBYTE>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	80da      	strh	r2, [r3, #6]
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800604c:	2180      	movs	r1, #128	@ 0x80
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fcf8 	bl	8006a44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006054:	2100      	movs	r1, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fcf4 	bl	8006a44 <USBD_LL_StallEP>
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d042      	beq.n	8006100 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800607e:	6938      	ldr	r0, [r7, #16]
 8006080:	f000 f842 	bl	8006108 <USBD_GetLen>
 8006084:	4603      	mov	r3, r0
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800608e:	d808      	bhi.n	80060a2 <USBD_GetString+0x3e>
 8006090:	6938      	ldr	r0, [r7, #16]
 8006092:	f000 f839 	bl	8006108 <USBD_GetLen>
 8006096:	4603      	mov	r3, r0
 8006098:	3301      	adds	r3, #1
 800609a:	b29b      	uxth	r3, r3
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	e001      	b.n	80060a6 <USBD_GetString+0x42>
 80060a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	3301      	adds	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	2203      	movs	r2, #3
 80060c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	3301      	adds	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80060cc:	e013      	b.n	80060f6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	4413      	add	r3, r2
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	7812      	ldrb	r2, [r2, #0]
 80060d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3301      	adds	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
    idx++;
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	3301      	adds	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	4413      	add	r3, r2
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	3301      	adds	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e7      	bne.n	80060ce <USBD_GetString+0x6a>
 80060fe:	e000      	b.n	8006102 <USBD_GetString+0x9e>
    return;
 8006100:	bf00      	nop
  }
}
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006118:	e005      	b.n	8006126 <USBD_GetLen+0x1e>
  {
    len++;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	3301      	adds	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	3301      	adds	r3, #1
 8006124:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f5      	bne.n	800611a <USBD_GetLen+0x12>
  }

  return len;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2202      	movs	r2, #2
 800614c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	2100      	movs	r1, #0
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fcf4 	bl	8006b56 <USBD_LL_Transmit>

  return USBD_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	2100      	movs	r1, #0
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fce3 	bl	8006b56 <USBD_LL_Transmit>

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2203      	movs	r2, #3
 80061aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	2100      	movs	r1, #0
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fce3 	bl	8006b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	2100      	movs	r1, #0
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fcd2 	bl	8006b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2204      	movs	r2, #4
 800620a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800620e:	2300      	movs	r3, #0
 8006210:	2200      	movs	r2, #0
 8006212:	2100      	movs	r1, #0
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fc9e 	bl	8006b56 <USBD_LL_Transmit>

  return USBD_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2205      	movs	r2, #5
 8006230:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006234:	2300      	movs	r3, #0
 8006236:	2200      	movs	r2, #0
 8006238:	2100      	movs	r1, #0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fcac 	bl	8006b98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006250:	2200      	movs	r2, #0
 8006252:	4912      	ldr	r1, [pc, #72]	@ (800629c <MX_USB_DEVICE_Init+0x50>)
 8006254:	4812      	ldr	r0, [pc, #72]	@ (80062a0 <MX_USB_DEVICE_Init+0x54>)
 8006256:	f7fe fcd9 	bl	8004c0c <USBD_Init>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006260:	f7fa fa30 	bl	80006c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006264:	490f      	ldr	r1, [pc, #60]	@ (80062a4 <MX_USB_DEVICE_Init+0x58>)
 8006266:	480e      	ldr	r0, [pc, #56]	@ (80062a0 <MX_USB_DEVICE_Init+0x54>)
 8006268:	f7fe fd00 	bl	8004c6c <USBD_RegisterClass>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006272:	f7fa fa27 	bl	80006c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006276:	490c      	ldr	r1, [pc, #48]	@ (80062a8 <MX_USB_DEVICE_Init+0x5c>)
 8006278:	4809      	ldr	r0, [pc, #36]	@ (80062a0 <MX_USB_DEVICE_Init+0x54>)
 800627a:	f7fe fbf7 	bl	8004a6c <USBD_CDC_RegisterInterface>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006284:	f7fa fa1e 	bl	80006c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006288:	4805      	ldr	r0, [pc, #20]	@ (80062a0 <MX_USB_DEVICE_Init+0x54>)
 800628a:	f7fe fd25 	bl	8004cd8 <USBD_Start>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006294:	f7fa fa16 	bl	80006c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006298:	bf00      	nop
 800629a:	bd80      	pop	{r7, pc}
 800629c:	200000ac 	.word	0x200000ac
 80062a0:	20000120 	.word	0x20000120
 80062a4:	20000018 	.word	0x20000018
 80062a8:	20000098 	.word	0x20000098

080062ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80062b0:	2200      	movs	r2, #0
 80062b2:	4905      	ldr	r1, [pc, #20]	@ (80062c8 <CDC_Init_FS+0x1c>)
 80062b4:	4805      	ldr	r0, [pc, #20]	@ (80062cc <CDC_Init_FS+0x20>)
 80062b6:	f7fe fbf3 	bl	8004aa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80062ba:	4905      	ldr	r1, [pc, #20]	@ (80062d0 <CDC_Init_FS+0x24>)
 80062bc:	4803      	ldr	r0, [pc, #12]	@ (80062cc <CDC_Init_FS+0x20>)
 80062be:	f7fe fc11 	bl	8004ae4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80062c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000bfc 	.word	0x20000bfc
 80062cc:	20000120 	.word	0x20000120
 80062d0:	200003fc 	.word	0x200003fc

080062d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80062d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	6039      	str	r1, [r7, #0]
 80062ee:	71fb      	strb	r3, [r7, #7]
 80062f0:	4613      	mov	r3, r2
 80062f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b23      	cmp	r3, #35	@ 0x23
 80062f8:	d84a      	bhi.n	8006390 <CDC_Control_FS+0xac>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <CDC_Control_FS+0x1c>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	08006391 	.word	0x08006391
 8006304:	08006391 	.word	0x08006391
 8006308:	08006391 	.word	0x08006391
 800630c:	08006391 	.word	0x08006391
 8006310:	08006391 	.word	0x08006391
 8006314:	08006391 	.word	0x08006391
 8006318:	08006391 	.word	0x08006391
 800631c:	08006391 	.word	0x08006391
 8006320:	08006391 	.word	0x08006391
 8006324:	08006391 	.word	0x08006391
 8006328:	08006391 	.word	0x08006391
 800632c:	08006391 	.word	0x08006391
 8006330:	08006391 	.word	0x08006391
 8006334:	08006391 	.word	0x08006391
 8006338:	08006391 	.word	0x08006391
 800633c:	08006391 	.word	0x08006391
 8006340:	08006391 	.word	0x08006391
 8006344:	08006391 	.word	0x08006391
 8006348:	08006391 	.word	0x08006391
 800634c:	08006391 	.word	0x08006391
 8006350:	08006391 	.word	0x08006391
 8006354:	08006391 	.word	0x08006391
 8006358:	08006391 	.word	0x08006391
 800635c:	08006391 	.word	0x08006391
 8006360:	08006391 	.word	0x08006391
 8006364:	08006391 	.word	0x08006391
 8006368:	08006391 	.word	0x08006391
 800636c:	08006391 	.word	0x08006391
 8006370:	08006391 	.word	0x08006391
 8006374:	08006391 	.word	0x08006391
 8006378:	08006391 	.word	0x08006391
 800637c:	08006391 	.word	0x08006391
 8006380:	08006391 	.word	0x08006391
 8006384:	08006391 	.word	0x08006391
 8006388:	08006391 	.word	0x08006391
 800638c:	08006391 	.word	0x08006391
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006390:	bf00      	nop
  }

  return (USBD_OK);
 8006392:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4805      	ldr	r0, [pc, #20]	@ (80063c4 <CDC_Receive_FS+0x24>)
 80063ae:	f7fe fb99 	bl	8004ae4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063b2:	4804      	ldr	r0, [pc, #16]	@ (80063c4 <CDC_Receive_FS+0x24>)
 80063b4:	f7fe fbf4 	bl	8004ba0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80063b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000120 	.word	0x20000120

080063c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <CDC_Transmit_FS+0x48>)
 80063da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80063de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e00b      	b.n	8006406 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	4806      	ldr	r0, [pc, #24]	@ (8006410 <CDC_Transmit_FS+0x48>)
 80063f6:	f7fe fb53 	bl	8004aa0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063fa:	4805      	ldr	r0, [pc, #20]	@ (8006410 <CDC_Transmit_FS+0x48>)
 80063fc:	f7fe fb90 	bl	8004b20 <USBD_CDC_TransmitPacket>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000120 	.word	0x20000120

08006414 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800642a:	4618      	mov	r0, r3
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2212      	movs	r2, #18
 8006448:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800644a:	4b03      	ldr	r3, [pc, #12]	@ (8006458 <USBD_FS_DeviceDescriptor+0x20>)
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	200000c8 	.word	0x200000c8

0800645c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2204      	movs	r2, #4
 800646c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800646e:	4b03      	ldr	r3, [pc, #12]	@ (800647c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	200000dc 	.word	0x200000dc

08006480 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	6039      	str	r1, [r7, #0]
 800648a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d105      	bne.n	800649e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	4907      	ldr	r1, [pc, #28]	@ (80064b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006496:	4808      	ldr	r0, [pc, #32]	@ (80064b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006498:	f7ff fde4 	bl	8006064 <USBD_GetString>
 800649c:	e004      	b.n	80064a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4904      	ldr	r1, [pc, #16]	@ (80064b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80064a2:	4805      	ldr	r0, [pc, #20]	@ (80064b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80064a4:	f7ff fdde 	bl	8006064 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064a8:	4b02      	ldr	r3, [pc, #8]	@ (80064b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200013fc 	.word	0x200013fc
 80064b8:	08006d0c 	.word	0x08006d0c

080064bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	4904      	ldr	r1, [pc, #16]	@ (80064dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80064cc:	4804      	ldr	r0, [pc, #16]	@ (80064e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80064ce:	f7ff fdc9 	bl	8006064 <USBD_GetString>
  return USBD_StrDesc;
 80064d2:	4b02      	ldr	r3, [pc, #8]	@ (80064dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	200013fc 	.word	0x200013fc
 80064e0:	08006d24 	.word	0x08006d24

080064e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	221a      	movs	r2, #26
 80064f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80064f6:	f000 f843 	bl	8006580 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80064fa:	4b02      	ldr	r3, [pc, #8]	@ (8006504 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	200000e0 	.word	0x200000e0

08006508 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	4907      	ldr	r1, [pc, #28]	@ (800653c <USBD_FS_ConfigStrDescriptor+0x34>)
 800651e:	4808      	ldr	r0, [pc, #32]	@ (8006540 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006520:	f7ff fda0 	bl	8006064 <USBD_GetString>
 8006524:	e004      	b.n	8006530 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	4904      	ldr	r1, [pc, #16]	@ (800653c <USBD_FS_ConfigStrDescriptor+0x34>)
 800652a:	4805      	ldr	r0, [pc, #20]	@ (8006540 <USBD_FS_ConfigStrDescriptor+0x38>)
 800652c:	f7ff fd9a 	bl	8006064 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006530:	4b02      	ldr	r3, [pc, #8]	@ (800653c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200013fc 	.word	0x200013fc
 8006540:	08006d38 	.word	0x08006d38

08006544 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	6039      	str	r1, [r7, #0]
 800654e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d105      	bne.n	8006562 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	4907      	ldr	r1, [pc, #28]	@ (8006578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800655a:	4808      	ldr	r0, [pc, #32]	@ (800657c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800655c:	f7ff fd82 	bl	8006064 <USBD_GetString>
 8006560:	e004      	b.n	800656c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	4904      	ldr	r1, [pc, #16]	@ (8006578 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006566:	4805      	ldr	r0, [pc, #20]	@ (800657c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006568:	f7ff fd7c 	bl	8006064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800656c:	4b02      	ldr	r3, [pc, #8]	@ (8006578 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200013fc 	.word	0x200013fc
 800657c:	08006d44 	.word	0x08006d44

08006580 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006586:	4b0f      	ldr	r3, [pc, #60]	@ (80065c4 <Get_SerialNum+0x44>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800658c:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <Get_SerialNum+0x48>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006592:	4b0e      	ldr	r3, [pc, #56]	@ (80065cc <Get_SerialNum+0x4c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065a6:	2208      	movs	r2, #8
 80065a8:	4909      	ldr	r1, [pc, #36]	@ (80065d0 <Get_SerialNum+0x50>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f814 	bl	80065d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065b0:	2204      	movs	r2, #4
 80065b2:	4908      	ldr	r1, [pc, #32]	@ (80065d4 <Get_SerialNum+0x54>)
 80065b4:	68b8      	ldr	r0, [r7, #8]
 80065b6:	f000 f80f 	bl	80065d8 <IntToUnicode>
  }
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	1fff7a10 	.word	0x1fff7a10
 80065c8:	1fff7a14 	.word	0x1fff7a14
 80065cc:	1fff7a18 	.word	0x1fff7a18
 80065d0:	200000e2 	.word	0x200000e2
 80065d4:	200000f2 	.word	0x200000f2

080065d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]
 80065ee:	e027      	b.n	8006640 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	0f1b      	lsrs	r3, r3, #28
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d80b      	bhi.n	8006610 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	0f1b      	lsrs	r3, r3, #28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4619      	mov	r1, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	440b      	add	r3, r1
 8006608:	3230      	adds	r2, #48	@ 0x30
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e00a      	b.n	8006626 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	0f1b      	lsrs	r3, r3, #28
 8006614:	b2da      	uxtb	r2, r3
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	4619      	mov	r1, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	440b      	add	r3, r1
 8006620:	3237      	adds	r2, #55	@ 0x37
 8006622:	b2d2      	uxtb	r2, r2
 8006624:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	3301      	adds	r3, #1
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	4413      	add	r3, r2
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	3301      	adds	r3, #1
 800663e:	75fb      	strb	r3, [r7, #23]
 8006640:	7dfa      	ldrb	r2, [r7, #23]
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	429a      	cmp	r2, r3
 8006646:	d3d3      	bcc.n	80065f0 <IntToUnicode+0x18>
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	@ 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006678:	d147      	bne.n	800670a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	4a24      	ldr	r2, [pc, #144]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6313      	str	r3, [r2, #48]	@ 0x30
 800668a:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800669a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066a4:	f107 0314 	add.w	r3, r7, #20
 80066a8:	4619      	mov	r1, r3
 80066aa:	481b      	ldr	r0, [pc, #108]	@ (8006718 <HAL_PCD_MspInit+0xc0>)
 80066ac:	f7fa fa56 	bl	8000b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80066b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80066b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b6:	2302      	movs	r3, #2
 80066b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066be:	2303      	movs	r3, #3
 80066c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80066c2:	230a      	movs	r3, #10
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	4619      	mov	r1, r3
 80066cc:	4812      	ldr	r0, [pc, #72]	@ (8006718 <HAL_PCD_MspInit+0xc0>)
 80066ce:	f7fa fa45 	bl	8000b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80066d2:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 80066d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 80066d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	4a0b      	ldr	r2, [pc, #44]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 80066e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80066ee:	4b09      	ldr	r3, [pc, #36]	@ (8006714 <HAL_PCD_MspInit+0xbc>)
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80066fa:	2200      	movs	r2, #0
 80066fc:	2100      	movs	r1, #0
 80066fe:	2043      	movs	r0, #67	@ 0x43
 8006700:	f7fa f9f5 	bl	8000aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006704:	2043      	movs	r0, #67	@ 0x43
 8006706:	f7fa fa0e 	bl	8000b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800670a:	bf00      	nop
 800670c:	3728      	adds	r7, #40	@ 0x28
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40023800 	.word	0x40023800
 8006718:	40020000 	.word	0x40020000

0800671c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe fb1d 	bl	8004d72 <USBD_LL_SetupStage>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	4619      	mov	r1, r3
 800676a:	f7fe fb57 	bl	8004e1c <USBD_LL_DataOutStage>
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3320      	adds	r3, #32
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	4619      	mov	r1, r3
 800679e:	f7fe fbf9 	bl	8004f94 <USBD_LL_DataInStage>
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe fd3d 	bl	8005238 <USBD_LL_SOF>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	79db      	ldrb	r3, [r3, #7]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d001      	beq.n	80067de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80067da:	f7f9 ff73 	bl	80006c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067e4:	7bfa      	ldrb	r2, [r7, #15]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fce1 	bl	80051b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe fc88 	bl	800510a <USBD_LL_Reset>
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fcdc 	bl	80051d0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7adb      	ldrb	r3, [r3, #11]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006838:	4b04      	ldr	r3, [pc, #16]	@ (800684c <HAL_PCD_SuspendCallback+0x48>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	4a03      	ldr	r2, [pc, #12]	@ (800684c <HAL_PCD_SuspendCallback+0x48>)
 800683e:	f043 0306 	orr.w	r3, r3, #6
 8006842:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fcd2 	bl	8005208 <USBD_LL_Resume>
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fd2a 	bl	80052dc <USBD_LL_IsoOUTIncomplete>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe fce6 	bl	8005278 <USBD_LL_IsoINIncomplete>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fd3c 	bl	8005340 <USBD_LL_DevConnected>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fd39 	bl	8005356 <USBD_LL_DevDisconnected>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d13c      	bne.n	8006976 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80068fc:	4a20      	ldr	r2, [pc, #128]	@ (8006980 <USBD_LL_Init+0x94>)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1e      	ldr	r2, [pc, #120]	@ (8006980 <USBD_LL_Init+0x94>)
 8006908:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800690c:	4b1c      	ldr	r3, [pc, #112]	@ (8006980 <USBD_LL_Init+0x94>)
 800690e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006914:	4b1a      	ldr	r3, [pc, #104]	@ (8006980 <USBD_LL_Init+0x94>)
 8006916:	2204      	movs	r2, #4
 8006918:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800691a:	4b19      	ldr	r3, [pc, #100]	@ (8006980 <USBD_LL_Init+0x94>)
 800691c:	2202      	movs	r2, #2
 800691e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006920:	4b17      	ldr	r3, [pc, #92]	@ (8006980 <USBD_LL_Init+0x94>)
 8006922:	2200      	movs	r2, #0
 8006924:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006926:	4b16      	ldr	r3, [pc, #88]	@ (8006980 <USBD_LL_Init+0x94>)
 8006928:	2202      	movs	r2, #2
 800692a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800692c:	4b14      	ldr	r3, [pc, #80]	@ (8006980 <USBD_LL_Init+0x94>)
 800692e:	2200      	movs	r2, #0
 8006930:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006932:	4b13      	ldr	r3, [pc, #76]	@ (8006980 <USBD_LL_Init+0x94>)
 8006934:	2200      	movs	r2, #0
 8006936:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <USBD_LL_Init+0x94>)
 800693a:	2200      	movs	r2, #0
 800693c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <USBD_LL_Init+0x94>)
 8006940:	2201      	movs	r2, #1
 8006942:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006944:	4b0e      	ldr	r3, [pc, #56]	@ (8006980 <USBD_LL_Init+0x94>)
 8006946:	2200      	movs	r2, #0
 8006948:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800694a:	480d      	ldr	r0, [pc, #52]	@ (8006980 <USBD_LL_Init+0x94>)
 800694c:	f7fa fabd 	bl	8000eca <HAL_PCD_Init>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006956:	f7f9 feb5 	bl	80006c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800695a:	2180      	movs	r1, #128	@ 0x80
 800695c:	4808      	ldr	r0, [pc, #32]	@ (8006980 <USBD_LL_Init+0x94>)
 800695e:	f7fb fcea 	bl	8002336 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006962:	2240      	movs	r2, #64	@ 0x40
 8006964:	2100      	movs	r1, #0
 8006966:	4806      	ldr	r0, [pc, #24]	@ (8006980 <USBD_LL_Init+0x94>)
 8006968:	f7fb fc9e 	bl	80022a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800696c:	2280      	movs	r2, #128	@ 0x80
 800696e:	2101      	movs	r1, #1
 8006970:	4803      	ldr	r0, [pc, #12]	@ (8006980 <USBD_LL_Init+0x94>)
 8006972:	f7fb fc99 	bl	80022a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	200015fc 	.word	0x200015fc

08006984 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800699a:	4618      	mov	r0, r3
 800699c:	f7fa fba4 	bl	80010e8 <HAL_PCD_Start>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f942 	bl	8006c30 <USBD_Get_USB_Status>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	461a      	mov	r2, r3
 80069c8:	4603      	mov	r3, r0
 80069ca:	70fb      	strb	r3, [r7, #3]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70bb      	strb	r3, [r7, #2]
 80069d0:	4613      	mov	r3, r2
 80069d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80069e2:	78bb      	ldrb	r3, [r7, #2]
 80069e4:	883a      	ldrh	r2, [r7, #0]
 80069e6:	78f9      	ldrb	r1, [r7, #3]
 80069e8:	f7fb f878 	bl	8001adc <HAL_PCD_EP_Open>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f91c 	bl	8006c30 <USBD_Get_USB_Status>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fb f8c3 	bl	8001bb0 <HAL_PCD_EP_Close>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f8fd 	bl	8006c30 <USBD_Get_USB_Status>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a5e:	78fa      	ldrb	r2, [r7, #3]
 8006a60:	4611      	mov	r1, r2
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fb f97b 	bl	8001d5e <HAL_PCD_EP_SetStall>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f8de 	bl	8006c30 <USBD_Get_USB_Status>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a9c:	78fa      	ldrb	r2, [r7, #3]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fb f9bf 	bl	8001e24 <HAL_PCD_EP_ClrStall>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 f8bf 	bl	8006c30 <USBD_Get_USB_Status>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006ad2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da0b      	bge.n	8006af4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	3316      	adds	r3, #22
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	e00b      	b.n	8006b0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006b0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fa ffac 	bl	8001a94 <HAL_PCD_SetAddress>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 f874 	bl	8006c30 <USBD_Get_USB_Status>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b086      	sub	sp, #24
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	60f8      	str	r0, [r7, #12]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	460b      	mov	r3, r1
 8006b64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006b74:	7af9      	ldrb	r1, [r7, #11]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	f7fb f8b6 	bl	8001cea <HAL_PCD_EP_Transmit>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f853 	bl	8006c30 <USBD_Get_USB_Status>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006bb6:	7af9      	ldrb	r1, [r7, #11]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	f7fb f842 	bl	8001c44 <HAL_PCD_EP_Receive>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f832 	bl	8006c30 <USBD_Get_USB_Status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006bd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	460b      	mov	r3, r1
 8006be4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fb f862 	bl	8001cba <HAL_PCD_EP_GetRxCount>
 8006bf6:	4603      	mov	r3, r0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c08:	4b03      	ldr	r3, [pc, #12]	@ (8006c18 <USBD_static_malloc+0x18>)
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	20001ae0 	.word	0x20001ae0

08006c1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]

}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d817      	bhi.n	8006c74 <USBD_Get_USB_Status+0x44>
 8006c44:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <USBD_Get_USB_Status+0x1c>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c63 	.word	0x08006c63
 8006c54:	08006c69 	.word	0x08006c69
 8006c58:	08006c6f 	.word	0x08006c6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c60:	e00b      	b.n	8006c7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c62:	2303      	movs	r3, #3
 8006c64:	73fb      	strb	r3, [r7, #15]
    break;
 8006c66:	e008      	b.n	8006c7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6c:	e005      	b.n	8006c7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	73fb      	strb	r3, [r7, #15]
    break;
 8006c72:	e002      	b.n	8006c7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	73fb      	strb	r3, [r7, #15]
    break;
 8006c78:	bf00      	nop
  }
  return usb_status;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <memset>:
 8006c88:	4402      	add	r2, r0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	@ (8006cdc <__libc_init_array+0x44>)
 8006cac:	f000 f818 	bl	8006ce0 <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	08006d6c 	.word	0x08006d6c
 8006cd4:	08006d6c 	.word	0x08006d6c
 8006cd8:	08006d6c 	.word	0x08006d6c
 8006cdc:	08006d70 	.word	0x08006d70

08006ce0 <_init>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr

08006cec <_fini>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	bf00      	nop
 8006cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf2:	bc08      	pop	{r3}
 8006cf4:	469e      	mov	lr, r3
 8006cf6:	4770      	bx	lr
